1
00:00:00,310 --> 00:00:05,000
‫خب آخرین تابع که در مورد آن صحبت خواهیم کرد compile می‌باشد

2
00:00:05,000 --> 00:00:10,000
‫تا کنون از تابع link در اکثر دایرکتیوهایمان استفاده کرده‌ایم،

3
00:00:10,000 --> 00:00:14,000
‫مانند دایرکتیو Gravatar که برای مشاهده تغییرات ویژگی

4
00:00:14,000 --> 00:00:17,000
‫ایمیل و پاسخ‌گویی به تغییرات آن، استفاده کردیم.

5
00:00:17,000 --> 00:00:23,000
‫تابع compile نیز مشابه آن است، اما تابعی است که برای
‫دستکاری DOM استفاده می‌شود

6
00:00:23,000 --> 00:00:31,000
‫همچنین قبل از تابع link اجرا می‌شود. بنابراین، اگر به صفحه جدیدی
‫که ایجاد کردیم برویم،

7
00:00:31,000 --> 00:00:35,000
‫چیزی که می‌خواهیم ایجاد کنیم، دایرکتیوی است که به شما
‫امکان

8
00:00:35,000 --> 00:00:46,000
‫تکرار یک عنصر را به تعداد x بار در اختیارتان قرار می‌دهد. بنابراین،
‫یک div ایجاد خواهیم کرد و نام دایرکتیومان را repeat-x می‌گذاریم

9
00:00:46,000 --> 00:00:52,000
‫این دایرکتیو تعداد دفعاتی که می‌خواهیم عنصر تکرار شود را از ورودی خواهد گرفت.

10
00:00:52,000 --> 00:00:56,000
‫بنابراین، برای شروع به تعداد 5 بار عبارت Hello را تکرار می‌کنیم.

11
00:00:56,000 --> 00:01:03,000
‫خب، قبلاً ساختار دایرکتیو repeat-x را ایجاد کرده‌ام، همچنین قبلاً تابع
‫کامپایل را آموزش داده بودم

12
00:01:03,000 --> 00:01:07,000
‫میخواهم همین کار را با استفاده از تابع link انجام دهیم.

13
00:01:07,000 --> 00:01:14,000
‫خب، اجازه دهید یک تابع link ایجاد کنیم سپس داخل این تابع

14
00:01:14,000 --> 00:01:21,000
‫به تعداد دفعات که توسط repeat-x پاس داده شده است، یک حلقه ایجاد کنیم.

15
00:01:21,000 --> 00:01:29,000
‫خب، در هر بار اجرای حلقه می‌خواهیم عنصر را به عنصر موجود اضافه کنیم.

16
00:01:33,000 --> 00:01:39,000
‫زیرا می‌خواهیم یک عنصر را که دارای دایرکتیو repeat-x است را clone کنیم،

17
00:01:39,000 --> 00:01:44,000
‫عنصر جدید نیز دارای دایرکتیو repeat-x می‌باشد، این دایرکتیو بعد
‫از اینکه پاس داده شود

18
00:01:44,000 --> 00:01:48,000
‫به تعداد 5 بار عنصر جدید را clone می‌کند در نتیجه یک حلقه بی‌نهایت خواهیم داشت.

19
00:01:48,000 --> 00:01:54,000
‫بنابراین، وقتی این عنصر را clone می‌کنیم می‌بایست ویژگی آن را تغییر دهیم.

20
00:01:54,000 --> 00:02:00,000
‫خب، عناصر clone شده دیگر تکرار نخواهند شد، اما هنوز ویژگی
‫repeat را دارند

21
00:02:00,000 --> 00:02:04,000
‫به گونه‌ایی که هنوز نیز به عنوان یک دایرکتیو پاس داده می‌شوند و به تعداد
‫0 بار تکرار می‌شوند.

22
00:02:04,000 --> 00:02:11,000
‫خب، اجازه دهید خروجی را ببینیم. بفرمائید، عبارت Hello به تعداد
‫5 بار تکرار شده است.

23
00:02:11,000 --> 00:02:16,000
‫خب، مانند قبل اینکار را انجام دهیم، چه نیازی به تابع compile داریم؟

24
00:02:16,000 --> 00:02:20,000
‫خب، اجازه دهید این مثال را کمی پیچیده‌تر کنیم.

25
00:02:20,000 --> 00:02:28,000
‫ابتدا، یک فیلد متنی ایجاد میکنیم و می‌خواهیم ورودی که وارد می‌کنیم
‫قابل تکرار باشد.

26
00:02:28,000 --> 00:02:33,000
‫خب، متنی ورودی نیز به ویژگی text بایند خواهد شد.

27
00:02:33,000 --> 00:02:41,000
‫خب اجازه دهید خروجی را ببنیم. وقتی صفحه را بروزرسانی می‌کنم
‫عنصر اولی به خوبی کار خواهد کرد

28
00:02:41,000 --> 00:02:46,000
‫اما عناصر که تکرار می‌شوند به صورت عبارت انگولار می‌باشند.

29
00:02:46,000 --> 00:02:50,000
‫زیرا expression (عبارات) هنوز کامپایل نشده‌اند.

30
00:02:50,000 --> 00:02:58,000
‫اگر در این قسمت سرویس compile را پاس دهیم

31
00:02:58,000 --> 00:03:03,000
‫عناصر قبل از اضافه شدن کامپایل خواهند شد.

32
00:03:03,000 --> 00:03:10,000
‫برای اطلاعات بیشتر درباره سرویس کامپایل می‌توانید به ویدئو compile
‫در ماژول سرویس‌ها مراجعه کنید.

33
00:03:10,000 --> 00:03:17,000
‫اکنون خروجی به خوبی کار می‌کند.

34
00:03:17,000 --> 00:03:24,000
‫ممکن است تعجب کنید که چرا از سرویس compile استفاده می‌کنیم.

35
00:03:24,000 --> 00:03:28,000
‫خب برای یک مورد، این فراخوانی سرویس compile به طریقی یک فراخوانی هزینه‌بر است.

36
00:03:28,000 --> 00:03:36,000
‫در کامپایل کردن باید DOM به صورت کامل برای انگولار جهت جستجوی
‫دایرکتیوها که نیاز به پردازش دارند، پیمایش شود

37
00:03:36,000 --> 00:03:40,000
‫در نتیجه این عمل هزینه‌بر می‌باشد.

38
00:03:40,000 --> 00:03:44,000
‫خب، کاری که باید انجام دهیم قرار دادن این پنج عنصر کپی شده
‫به صورت یک تمپلیت و سپس کامپایل کردن این تمپلیت می‌باشد

39
00:03:44,000 --> 00:03:47,000
‫در نتیجه به یکبار کامپایل خواهد شد.

40
00:03:47,000 --> 00:03:52,000
‫خب دلیل این که تیم انگولار تابع‌های compile و link را گسترش می‌دهد

41
00:03:52,000 --> 00:03:58,000
‫در واقع performance می‌باشد، کامپایل کردن در واقع فرآیندی زمانبر است.

42
00:03:58,000 --> 00:04:06,000
‫خب، اجازه دهید آن را به طریقی که از متد کامپایل استفاده کند تغییر دهیم. 
‫بنابراین، این تابع link را به compile تغییر می‌دهیم.

43
00:04:06,000 --> 00:04:10,000
‫تابع compile تنها یک element و یک attributes از ورودی دریافت می‌کند.

44
00:04:10,000 --> 00:04:16,000
‫بنابراین به خاطر داشته باشید وقتی که از یک تابع compile استفاده می‌کنید،
‫scope برای شما در دسترس نخواهد بود

45
00:04:16,000 --> 00:04:25,000
‫زیرا در اینجا موضوع دستکاری DOM است، نه بایندینگ scope و…

46
00:04:25,000 --> 00:04:31,000
‫از آنجائیکه تمامی کاری که باید انجام دهیم کپی کردن تمپلیت است. که در اینجا
‫نیاز به کامپایل نیست.

47
00:04:31,000 --> 00:04:37,000
‫در نتیجه آن را حذف می‌کنیم.

48
00:04:37,000 --> 00:04:48,000
‫خب اجازه دهید نحوهٔ کار آن را بررسی کنیم. خب، اکنون به خوبی کار می‌کند
‫کاری که اینجا انجام شده است

49
00:04:48,000 --> 00:04:55,000
‫کامپایل شدن این عنصر است. تمپلیت پردازش شده است

50
00:04:55,000 --> 00:04:59,000
‫و هر دایرکتیوی یا بایندینگی داخل آن کامپایل شده است.

51
00:04:59,000 --> 00:05:06,000
‫اکنون، درون تابع compile می‌توانید یک تابع link را برگردانید.

52
00:05:06,000 --> 00:05:10,000
‫در نتیجه این تابع link برای هر عنصر تکرار خواهد شد.

53
00:05:10,000 --> 00:05:16,000
‫خب، ذکر این نکته مهم است که تابع compile با یکبار اجرا بر روی
‫تمام نمونه‌های دایرکتیو تاثیر می‌گذارد

54
00:05:16,000 --> 00:05:22,000
‫سپس تابع link برای هر دایرکتیو نیز اجرا خواهد شد.

55
00:05:22,000 --> 00:05:27,000
‫خب، برای تابع compile به عنوان خروجی یک تابع link را در نظر می‌گیریم

56
00:05:27,000 --> 00:05:32,000
‫برای تابع link به این صورت عمل میکنیم. ابتدا درون صفحه HTML

57
00:05:32,000 --> 00:05:42,000
‫یک ویژگی text برای عنصرمان اضافه میکنیم که شامل یک عبارت می‌باشد.

58
00:05:42,000 --> 00:05:52,000
‫سپس در اینجا تابع link مان را ایجاد می‌کنیم که در واقع توسط تابع compile
‫برگردانده میشود.

59
00:05:52,000 --> 00:06:04,000
‫درون این linking function، ویژگی text را observer می‌کنیم
‫یعنی زمانیکه مقدار آن تغییر کرد

60
00:06:04,000 --> 00:06:16,000
‫در واقع اگر مقدار آن برابر با Hello World بود، رنگ عنصر را به
‫قرمز تغییر می‌دهیم.

61
00:06:16,000 --> 00:06:27,000
‫دیگر به این سرویس compile نیازی نداریم.

62
00:06:27,000 --> 00:06:34,000
‫خب، همانطور که مشاهده می‌کنید تابع compile ما به خوبی کار می‌کند

63
00:06:34,000 --> 00:06:39,000
‫همانطور که مشاهده میکنید تابع link برای هر عنصر اجرا شده است

64
00:06:39,000 --> 00:06:43,000
‫زیرا عبارت ورودی برابر با Hello World می‌باشد.

65
00:06:43,000 --> 00:06:48,000
‫خب، این نحوهٔ استفاده از تابع compile است فقط به خاطر داشته باشید
‫که اغلب مواقع

66
00:06:48,000 --> 00:06:52,000
‫در زمان ایجاد یک دایرکتیو یک تابع compile ایجاد نخواهید کرد.

67
00:06:52,000 --> 00:06:57,000
‫می‌توانید کارهای مختلفی توسط linking function

68
00:06:57,000 --> 00:07:03,000
‫و همچنین قالبی برای دستکاری HTML انجام دهید، یا اینکه عناصر
‫را با HTML جایگزین کنید.

69
00:07:03,000 --> 00:07:08,000
‫روش‌های مختلفی مثلاً برای تکرار عناصر در اختیار دارید.

70
00:07:08,000 --> 00:07:16,000
‫دایرکتیو ng-repeat در واقع از تابع compile در پشت صحنه استفاده می‌کند.

71
00:07:24,000 --> 00:07:26,000
‫خب، آخرین تست برای این ماژول.

72
00:07:26,000 --> 00:07:39,000
‫اولین سوال. چگونه از اجرای دایرکتیوهایی با اولویت کم جلوگیری می‌کنید؟

73
00:07:39,000 --> 00:07:45,000
‫با true کردن خاصیت terminal در یک دایرکتیوی که قبلاً خاصیت priority آن
‫را تنظیم کرده‌اید.

74
00:07:45,000 --> 00:07:59,000
‫سوال بعدی. چگونه از حذف محتوای تودرتو درون یک دایرکتیو جلوگیری می‌کنید؟

75
00:07:59,000 --> 00:08:07,000
‫توسط transclusion. با تنظیم خاصیت transclude به true
‫درون یک دایرکتیو و همچنین استفاده از ویژگی

76
00:08:07,000 --> 00:08:16,000
‫ng-transclude درون HTML

77
00:08:16,000 --> 00:08:32,000
‫آخرین سوال. کدام تابع دایرکتیو برای دستکاری DOM مورد استفاده قرار می‌گیرد؟

78
00:08:32,000 --> 00:08:38,000
‫تابع compile. این تابع کمتر استفاده می‌شود، اما اگر نیاز بود که DOM را

79
00:08:38,000 --> 00:08:43,000
‫به صورت مستقیم به عنوان بخشی از دایرکتیوتان دستکاری کنید،
‫تابع compile راه‌حلی خوبی است.


1
00:00:01,000 --> 00:00:06,000
‫خب، در ویدئوهای قبلی این سرویس‌ها را مورد بررسی قرار دادیم اکنون
‫اجازه دهید سرویس هایی را که کمتر

2
00:00:06,000 --> 00:00:12,000
‫مورد استفاده قرار می‌گیرند را بررسی کنیم خب با سرویس $interpolate
‫شروع خواهیم کرد.

3
00:00:12,000 --> 00:00:17,000
‫این سرویس به صورت داخلی توسط سرویس $compile در انگولار استفاده میشود
‫و معمولاً نیاز نیست شما به صورت

4
00:00:17,000 --> 00:00:24,000
‫مستقیم به آن دسترسی داشته باشید. اما مهم است که بدانید
‫که می‌توانید این سرویس را خودتان تغییر دهید.

5
00:00:24,000 --> 00:00:31,000
‫برای مثال، بیشتر فریم ورک‌های جاوا اسکریپتی از همان سینتکسی که انگولار
‫دارد استفاده میکنند

6
00:00:31,000 --> 00:00:36,000
‫و در بیشتر اوقات این وضعیت باعث ایجاد یک تداخل در بین دو فریم ورک جاوا اسکریپتی می‌شود.

7
00:00:36,000 --> 00:00:46,000
‫خب شما می‌توانید با تغییر پروایدر $interpolate علامتی که توسط
‫انگولار استفاده می‌شود را تغییر دهید.

8
00:00:46,000 --> 00:00:54,000
‫در زمان پیکربندی ماژول تان می‌توانید اینکار را انجام دهید و به آسانی
‫پروایدر $interpolate را تزریق کرده و سپس

9
00:00:54,000 --> 00:01:02,000
‫متدهای startSymbol و endSymbol را فراخوانی کنید و کارکترهای را که
‫می خواهید جایگزین کنید

10
00:01:02,000 --> 00:01:09,000
‫در این حالت ما از [[] ] استفاده می‌کنیم.

11
00:01:09,000 --> 00:01:13,000
‫خب، این در واقع کار سرویس $interpolate می‌باشد که

12
00:01:13,000 --> 00:01:18,000
‫در صورت نیاز می‌توانیم آنها را تغییر دهیم.

13
00:01:18,000 --> 00:01:27,000
‫سرویس $log جهت تشخیص لاگ کردن و عیب یابی مورد استفاده قرار می‌گیرد
‫و دارای چهار متد می‌باشد که می‌توانید از آنها استفاده کنید،

14
00:01:27,000 --> 00:01:32,000
‫به ترتیب: log ، info، warm و error که هر کدام خروجی‌های متفاوتی

15
00:01:32,000 --> 00:01:39,000
‫برای کنسول ارائه میدهند. بنابراین مجدداً این سرویس جهت دیباگ کردن
‫مورد استفاده قرار می‌گیرد.

16
00:01:39,000 --> 00:01:47,000
‫خب، سرویس $rootScope در پشت صحنه یک برنامه انگولار عمل می‌کند و درواقع
‫ما یک $rootScope به ازای هر برنامه انگولار داریم

17
00:01:47,000 --> 00:01:53,000
‫و زمانی مورد استفاده قرار می‌گیرد که یک scope جدید ایجاد شود.

18
00:01:53,000 --> 00:02:01,000
‫خب، هر وقت یک کنترلر می‌سازید، یک scope از $rootScope ایجاد می‌شود و

19
00:02:01,000 --> 00:02:09,000
‫و به صورت prototype از $rootScope ارث بری میکند، یعنی می‌توانید
‫پراپرتی‌ها و متدهایی برای $rootScope ایجاد کند که

20
00:02:09,000 --> 00:02:14,000
‫برای دیگر scope‌ها در دسترس قرار می‌گیرند.

21
00:02:14,000 --> 00:02:20,000
‫اما، مواظب باشید که $rootscope تان به یک زباله‌دان داده‌های گلوبال یا سراسری تبدیل نشود.

22
00:02:20,000 --> 00:02:27,000
‫$rootscope قابلیت تزریق درون کنترلرها و سرویس‌ها را دارد، اگرچه به طور
‫معمول نیازی به این کار نیست

23
00:02:27,000 --> 00:02:32,000
‫و به نوعی یک best practice جهت اجتناب از استفاده از $rootScope
‫است.

24
00:02:32,000 --> 00:02:39,000
‫حالاتی وجود دارد که لازم است از آن استفاده کنید، اما به یاد داشته باشید
‫که اگر اغلب از $rootScope استفاده می‌کنید

25
00:02:39,000 --> 00:02:44,000
‫ممکن است راه‌های بهتری هم وجود داشته باشد.

26
00:02:44,000 --> 00:02:51,000
‫بسیارخب، سرویس‌های آخری که می‌خواهیم نگاهی بر آنها داشته باشیم
‫سه سرویسی هستند که امکان دسترسی به DOM را در اختیارتان قرار میدهند.

27
00:02:51,000 --> 00:02:57,000
‫سرویس‌های window،document و rootElement.

28
00:02:57,000 --> 00:03:01,000
‫سرویس window و سرویس document همانطور که تصور می‌کنید کار میکنند،

29
00:03:01,000 --> 00:03:08,000
‫شیء‌های جاوا اسکریپتی document و window به عنوان یک سرویس
‫ارائه داده می‌شوند به طوری که در صورت نیاز

30
00:03:08,000 --> 00:03:15,000
‫می توانید آنها را تزریق کنید و آزمون‌های واحد را برای آن بنویسید، می‌توانید
‫آنها را شبیه سازی کنید در این صورت مشکلی برای

31
00:03:15,000 --> 00:03:20,000
‫استفاده از آنها داخل کدهایتان به وجود نمی‌آید.

32
00:03:20,000 --> 00:03:27,000
‫سرویس rootElement کار مشابهی را انجام میدهد، اما امکان دسترسی به
‫$rootElement انگولار را در اختیارتان قرار می‌دهد که

33
00:03:27,000 --> 00:03:32,000
‫شما در ng-app تان تعریف کرده اید.

34
00:03:32,000 --> 00:03:36,000
‫خب، این سرویس‌ها فقط امکان دسترسی به DOM را در اختیار شما قرار میدهند.

35
00:03:36,000 --> 00:03:43,000
‫اما، در واقع استفاده از اینها به عنوان یک best practice در نظر گرفته نمی‌شود.
‫اغلب اوقات شما دستکاری DOM را

36
00:03:43,000 --> 00:03:51,000
‫مستقیماً در انگولار انجام نمی‌دهید، به جای آن از طریق انقیاد داده این کار را انجام میدهید.

37
00:03:51,000 --> 00:03:57,000
‫خب، اگر زمانی لازم شد از این المنت‌ها استفاده کنید، موارد دیگری

38
00:03:57,000 --> 00:04:02,000
‫را که با انگولار سازگار هستند هم در نظر داشته باشید.

39
00:04:12,000 --> 00:04:16,000
‫بسیار خب، یک تست دیگر برای این قسمت.

40
00:04:16,000 --> 00:04:24,000
‫کدام سرویس را برای تغییر این سینتکس می‌بایست تغییر دهید؟

41
00:04:24,000 --> 00:04:33,000
‫سرویس interpolateProvider. اینکار را باید در مرحله پیکربندی برنامه تان انجام دهید.

42
00:04:33,000 --> 00:04:38,000
‫چه تعداد root scope در یک برنامه موجود هستند؟

43
00:04:38,000 --> 00:04:44,000
‫تنها یک scope ریشه، اگرچه تعداد زیادی child scopes نیز وجود دارند.

44
00:04:44,000 --> 00:04:51,000
‫آیا child scopes می‌توانند به عناصر root scope دسترسی داشته باشند؟

45
00:04:51,000 --> 00:04:56,000
‫بله. این امکان از طریق prototypal inheritance میسر می‌باشد.


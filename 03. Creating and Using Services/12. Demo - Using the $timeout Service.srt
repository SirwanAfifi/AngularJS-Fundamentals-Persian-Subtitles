1
00:00:01,000 --> 00:00:08,000
‫خب اجازه دهید نگاهی بر سرویس $timeout بیندازیم. این سرویس
‫خیلی شبیه به setTimeout جاوا اسکریپت می‌باشد

2
00:00:08,000 --> 00:00:14,000
‫اما با مقداری تفاوت مهم، که آنها را توضیح خواهیم داد.

3
00:00:14,000 --> 00:00:23,000
‫خب اجازه دهید این تگ h3 را که به name بایند می‌شود را ایجاد کنیم
‫سپس داخل کنترلر

4
00:00:23,000 --> 00:00:30,000
‫وقتی کنترلر در ابتدا ایجاد می‌شود از سرویس $timeout برای اجرای این
‫خط کد بعد از سه ثانیه اجرا می‌شود استفاده می‌کنیم،
scope. name = ««John Doe»

5
00:00:30,000 --> 00:00:41,000
‫اگر به مرورگر بریم و صفحه را

6
00:00:41,000 --> 00:00:49,000
‫ریفرش کنیم چیز خاصی را نخواهید دید ولی بعد از سه ثانیه name
‫نمایش داده می‌شود. اگر صفحه را مجدداً ریفرش کنم

7
00:00:49,000 --> 00:00:55,000
‫همانطور که مشاهده می‌کنید name بعد از سه ثانیه ظاهر می‌شود، اما
‫اگر توجه کرده باشید این $timeout

8
00:00:55,000 --> 00:01:05,000
‫یک promise را برمیگرداند که می‌توانیم برای کنسل کردن $timeout
‫از آن استفاده کنید. بنابراین اگر به صفحه برگردیم

9
00:01:05,000 --> 00:01:12,000
‫یک دکمه ایجاد میکنیم که cancel را در کنترلر فراخوانی میکند.

10
00:01:12,000 --> 00:01:20,000
‫خب اجازه دهید این تابع cancel را ایجاد کنیم. وقتی این تابع را
‫فراخوانی می‌کنیم قرار است timeout. cancel را صدا بزند

11
00:01:20,000 --> 00:01:27,000
‫و همچنین promise که در بالا ایجاد کردیم را با آن پاس میدهد.

12
00:01:27,000 --> 00:01:33,000
‫خب اجازه دهید صفحه را ریفرش کنیم. اکنون اگر بر روی آن کلیک نکنم،

13
00:01:33,000 --> 00:01:40,000
‫name همچنان نمایش داده می‌شود، اما اگر صفحه را ریفرش کنم
‫وقبل از اینکه timeout تمام شود بر روی کنسل کلیک کنم

14
00:01:40,000 --> 00:01:44,000
‫همانطور که مشاهده می‌کنید timeout اجرا نخواهد شد.

15
00:01:44,000 --> 00:01:50,000
‫خب، این به خوبی همانند متد setTimeout جاوا اسکریپت عمل میکند.

16
00:01:50,000 --> 00:01:55,000
‫اجازه دهید ببینیم که چرا باید از این سرویس استفاده کنید.

17
00:01:55,000 --> 00:02:00,000
‫خب برای توضیح این بخش به یک المنت دیگر بر روی صفحه نیاز خواهیم داشت،
‫چیزی که باعث خواهد شد انقیاد داده ها

18
00:02:00,000 --> 00:02:08,000
‫در صفحه مجدداً انجام شود. خب اجازه دهید در اینجا یک input box
‫ایجاد کنم که بایند خواهد شد

19
00:02:08,000 --> 00:02:11,000
‫در اینجا فعلاً مهم نیست به چه چیزی بایند شود.

20
00:02:11,000 --> 00:02:20,000
‫خب، به کنترلرمان بر میگردم و به جای استفاده از سرویس $timeout

21
00:02:20,000 --> 00:02:26,000
‫از تابع setTimeout جاوا اسکریپت استفاده میکنم، که سینتکس شان شبیه به هم است.

22
00:02:26,000 --> 00:02:30,000
‫و این input box را اینجا ایجاد کردیم به طوری که می‌تونیم

23
00:02:30,000 --> 00:02:35,000
‫تغییری در مدل بدهیم که این تغییر باعث میشود انگولار مجدداً بایندینگ را انجام دهد.

24
00:02:35,000 --> 00:02:45,000
‫خب اگر صفحه را ریفرش کنیم، توجه داشته باشید

25
00:02:45,000 --> 00:02:53,000
‫name را نمی‌بینیم. خب این setTimeout اجرا شده است، اما در یک ترد

26
00:02:53,000 --> 00:03:00,000
‫دیگر بیرون از انگولار اجرا شده است و انگولار نمی‌داند که مقدار name
‫تغییر کرده است.

27
00:03:00,000 --> 00:03:05,000
‫با نشان دادن آن باعث می‌شود انگولار مجدداً بایندینگ را انجام دهد و وقتی انجام میگیرد که

28
00:03:05,000 --> 00:03:12,000
‫مقداری در مدل تغییر پیدا کند. بنابراین اگر در اینجا چیزی تایپ کنم، توجه کنید که
‫این به چیزی بایند نشده است

29
00:03:12,000 --> 00:03:19,000
‫تنها به فیلدی با نام foo بایند شده است، اما باعث شد تا انگولار مجدداً بایندیگ را انجام دهد،

30
00:03:19,000 --> 00:03:29,000
‫که بلافاصله John نمایش داده می‌شود. setTimepout

31
00:03:29,000 --> 00:03:36,000
‫بعد از سه ثانیه اجرا شد و scope. name را به John Doe مقداردهی کرد، اما در صفحه نمایش داده نشد زیرا

32
00:03:36,000 --> 00:03:46,000
‫انگولار از آن مطلع نبود. خب، استفاده از سرویس $timeout انگولار به شما این امکان
‫را میدهد که timeout داخل انگولار

33
00:03:46,000 --> 00:03:52,000
‫روی بدهد به طوریکه تغییرات را مشاهده می‌کند و وقتی timeout تمام شد رخ میدهد.

34
00:03:52,000 --> 00:03:56,000
‫و این تمام کار این سرویس است.

35
00:03:56,000 --> 00:03:58,000
‫خب این یک تست دیگر است.

36
00:03:58,000 --> 00:04:07,000
‫از کدام سرویس جهت نمایش تاریخ و زمان و قالب اعداد به صورت بومی استفاده می‌کنید؟

37
00:04:07,000 --> 00:04:11,000
‫پاسخ $local است.

38
00:04:11,000 --> 00:04:18,000
‫چرا از سرویس $timeout به جای setTimeout استفاده میکنید؟

39
00:04:18,000 --> 00:04:25,000
‫زیرا، انگولار از تغییراتی که توسط این سرویس داده می‌شود اطلاع دارد.

40
00:04:25,000 --> 00:04:34,000
‫انگولار از کدام سرویس برای پردازش صفحه و هندل کردن دایرکتیوها در یک
‫صفحه استفاده میکند؟

41
00:04:34,000 --> 00:04:39,000
‫سرویس $compile


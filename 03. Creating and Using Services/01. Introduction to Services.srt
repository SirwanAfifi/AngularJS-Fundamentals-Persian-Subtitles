1
00:00:02,000 --> 00:00:08,000
‫سلام من جیم کوپر هستم و در این قسمت درباره ساخت

2
00:00:08,000 --> 00:00:15,000
‫سرویس‌های سفارشی در انگولار و چگونگی استفاده از سرویس‌های ‫توکار
‫انگولار صحبت خواهم کرد.

3
00:00:15,000 --> 00:00:22,000
‫خب قبل از هر چیز، منظور از سرویس چیست؟ اصطلاح سرویس
‫در واقع بیش از حد مورد استفاده قرار میگیرد

4
00:00:22,000 --> 00:00:27,000
‫گاهی برخی از این اصطلاح برای سرویس‌های تحت شبکه استفاده میکنند
‫مثلا به عنوان یک وب سرویس و یا یک سرویس WCF

5
00:00:27,000 --> 00:00:34,000
‫و یا حتی یک شیء که دربرگیرنده مجموعه ای

6
00:00:34,000 --> 00:00:38,000
‫business logicها یا اینکه کاری را برای ما انجام میدهد.

7
00:00:38,000 --> 00:00:42,000
‫با در نظر گرفتن انگولار، یک سرویس به توصیف آخر از سرویس‌ها اشاره دارد.

8
00:00:42,000 --> 00:00:48,000
‫یک سرویس یک شیء است که مجموعه ایی از اعمال business logic‌ها ‫را اجرا می‌کند. 
‫و از طریق شبکه در دسترس نیست.

9
00:00:48,000 --> 00:00:55,000
‫اگرچه ممکن است برای اجرای درخواست‌های ای جکس از طریق شبکه
‫نیز مورد استفاده قرار گیرد.

10
00:00:55,000 --> 00:01:00,000
‫همچنین، سرویس‌ها اغلب stateless هستند، اگرچه این مورد برای یک سرویس
‫که داده‌ها را کش میکند غیرعادی نیست.

11
00:01:00,000 --> 00:01:05,000
‫بنابراین، وقتی درباره سرویس‌ها صحبت میکنیم در نظر داشته باشید

12
00:01:05,000 --> 00:01:11,000
‫در مورد چیز خاصی صحبت نمی‌کنیم، بلکه منظورمان تنها یک شیء که دارای متدها و خصوصیت هایی
‫جهت استفاده مجدد است.

13
00:01:11,000 --> 00:01:16,000
‫انگولار دارای تعدادی سرویس توکار است.

14
00:01:16,000 --> 00:01:21,000
‫این سرویس‌ها اعمال navigation، تعاملات ای جکسی و… را ممکن می‌سازند،

15
00:01:21,000 --> 00:01:26,000
‫انگولار امکان ایجاد یک سرویس سفارشی را نیز به ما می‌دهد.

16
00:01:26,000 --> 00:01:31,000
‫تقریباً هر برنامه ایی که با انگولار می‌نویسید مستلزم ایجاد سرویس هایی است.

17
00:01:31,000 --> 00:01:39,000
‫این قسمت به بررسی ایجاد سرویس‌های سفارشی و استفاده از سرویس‌های
‫توکار انگولار خواهد پرداخت،

18
00:01:39,000 --> 00:01:45,000
‫خب چرا باید از سرویس‌ها استفاده کنیم؟ سرویس‌ها امکان استفاده
‫مجدد از قوانین تجاری برنامه و یا تعریف این قوانین داخل

19
00:01:45,000 --> 00:01:51,000
‫یک شیء که در کل برنامه در دسترس خواهد بود را به ما میدهند. 
‫بنابراین امکان استفاده مجدد یکی از دلایل استفاده از سرویس‌ها می‌باشد.

20
00:01:51,000 --> 00:01:55,000
‫همچنین امکان تقسیم برنامه به اجزای مختلفی جهت نگهداری آسان‌تر ‫را در اختیار ما قرار می‌دهد.

21
00:01:55,000 --> 00:02:00,000
‫شما می‌توانید تمام قوانین تجاری برنامه تان را داخل یک کنترلر قرار دهید،
‫اما وقتیکه سیستم بزرگتر می‌شود مدیریت آن نیز به مراتب سخت‌تر خواهد شد.

22
00:02:00,000 --> 00:02:04,000
‫همچنین اصل SRP را نفی خواهد کرد.

23
00:02:04,000 --> 00:02:08,000
‫اصل SRP یکی از پنج اصل طراحی OOP می‌باشد.

24
00:02:08,000 --> 00:02:12,000
‫این اصل تعیین میکند که یک شیء باید تنها یک مسئولیت واحد داشته باشد.

25
00:02:12,000 --> 00:02:18,000
‫اگر مایلید بیشتر در مورد SOLID یاد بگیرید، ویکی پدیا یک توصیف جالب
‫در رابطه با آن دارد.

26
00:02:18,000 --> 00:02:23,000
‫دلیل دیگر استفاده از سرویس ها، تزریق آنها داخل کنترلرها و دیگر سرویس ها

27
00:02:23,000 --> 00:02:30,000
‫در صورت لزوم می‌باشد. که امکان دسترسی به این قابلیت را به شما میدهد.

28
00:02:30,000 --> 00:02:36,000
‫انگولار همانند یک DI Container کامل رفتار می‌کند، که امکان دسترسی
‫به سرویس هایی که

29
00:02:36,000 --> 00:02:39,000
‫موردنیاز شما است را آسان میکند.

30
00:02:39,000 --> 00:02:44,000
‫و در نهایت، استفاده از سرویس‌ها امکان تست کدهایتان را آسان‌تر میکند،
‫به دلیل اینکه می‌توانید تست هایتان را برای تنها

31
00:02:44,000 --> 00:02:50,000
‫قسمتی از کدی که می‌خواهید برای آن تست بنویسید را جدا کنید.

32
00:02:50,000 --> 00:02:57,000
‫زیرا وقتی برای قسمتی از کدهایم تست می‌نویسم، می‌توانم هر سرویسی
‫که موردنیاز است را به جای تزریق سرویس‌های واقعی

33
00:02:57,000 --> 00:03:01,000
‫رفتار تقلید شده آن را می‌توانیم تزریق کنیم.

34
00:03:01,000 --> 00:03:06,000
‫انگولار از ابتدا قابلیت پذیری را به همراه داشت و سرویس‌ها یکی از مواردی

35
00:03:06,000 --> 00:03:09,000
‫هستند که امکان تست پذیری را دارند.

36
00:03:09,000 --> 00:03:14,000
‫یک سرویس انگولار، هم توکار و هم سفارشی در واقع سرویس هایی
‫هستند که در موردشان صحبت کردیم.

37
00:03:14,000 --> 00:03:20,000
‫در واقع یک شیء می‌باشد که همانند دیگر اشیاء می‌سازید به جز اینکه
‫وقتی که یک شیء را جهت استفاده به عنوان سرویس ایجاد می‌کنید

38
00:03:20,000 --> 00:03:26,000
‫انگولار تا زمانیکه شما این سرویس را ریجستر نکنید از وجود آن مطلع نخواهد بود

39
00:03:26,000 --> 00:03:33,000
‫ریجستر کردن یک سرویس در انگولار ساده است و تنها یک بار انجام می‌شود،
‫با اینکار شیء ساخته شده

40
00:03:33,000 --> 00:03:39,000
‫به عنوان قستمی از انگولار در نظر گرفته میشود و همانند دیگر سرویس‌ها ‫مورد استفاده قرار بگیرد.

41
00:03:39,000 --> 00:03:45,000
‫و به راحتی به کنترلرها و دایرکتیوها و فیلترها و حتی دیگر سرویس‌ها تزریق خواهد شد.

42
00:03:45,000 --> 00:03:51,000
‫همه این موارد جهت ساخت یک سرویس سفارشی در انگولار انجام خواهد گرفت.

43
00:03:51,000 --> 00:03:54,000
‫خب اجازه دهید مروری بر مطالب گفته شده داشته باشیم.

44
00:03:54,000 --> 00:04:03,000
‫درست یا غلط؟ آیا اصطلاح «سرویس» در انگولار به یک وب سرویس شبیه RESTful
‫اشاره دارد؟

45
00:04:03,000 --> 00:04:10,000
‫خیر، زیرا یک سرویس انگولار درون شبکه ایی نیست. در واقع یک شیء
‫کلاینتی است و ممکن است

46
00:04:10,000 --> 00:04:19,000
‫کارهای شبکه ایی همانند فراخوانی سرویس‌های RESTful را از طریق
‫ای جکس انجام دهد. اما لزوماً اینکار را انجام نمی‌دهد.

47
00:04:19,000 --> 00:04:22,000
‫چرا به سرویس‌ها نیاز داریم؟

48
00:04:22,000 --> 00:04:27,000
‫خب، دلایل متعددی وجود دارد، اما همانطور که تعدادی از آنها را مورد بررسی قرار دادیم،
‫سرویس‌ها قابلیت استفاده مجدد را دارند

49
00:04:27,000 --> 00:04:32,000
‫بنابراین می‌توانید در برنامه تان از آنها بارها استفاده کنید و به شما امکان پیروی از
‫اصول SRP را میدهد.

50
00:04:32,000 --> 00:04:40,000
‫و همچنین قابلیت تست پذیری و تزریق وابستگی‌ها را دارند.

51
00:04:40,000 --> 00:04:46,000
‫سوال آخر، چگونه یک سرویس انگولار با دیگر سرویس‌ها متفاوت است؟

52
00:04:46,000 --> 00:04:50,000
‫در واقع تفاوتی با سایر سرویس‌ها ندارد به جز اینکه می‌بایست به عنوان
‫سرویس توسط انگولار ریجستر شوند.

53
00:04:50,000 --> 00:04:55,000
‫در نتیجه انگولار می‌تواند در این صورت آنها را در صورت لزوم اینجکت کند.


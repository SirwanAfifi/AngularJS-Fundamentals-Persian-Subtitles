1
00:00:01,000 --> 00:00:06,000
‫بسیار خب، اجازه دهید نحوه استفاده از سرویس resource
‫را بررسی کنیم. عملکرد این سرویس همانند

2
00:00:06,000 --> 00:00:15,000
‫سرویس http برای ایجاد درخواست‌های ای جکس می‌باشد، اما
‫براساس معماری RESTful عمل میکند خوب فرض بر این است که

3
00:00:15,000 --> 00:00:19,000
‫وب سرورتان از معماری مبتنی بر REST استفاده میکند.

4
00:00:19,000 --> 00:00:30,000
‫خب، اجازه دهید برای شروع تمام این‌ها را با کد جدید
‫جایگرین کنم. خب یک فراخوانی resource داریم بعداً

5
00:00:30,000 --> 00:00:34,000
‫هرکدام از این قسمت‌ها به صورت جزیی توضیح خواهم داد.

6
00:00:34,000 --> 00:00:43,000
‫به جای اینها، resource را در اینجا تزریق میکنیم سپس داخل کنترلر

7
00:00:43,000 --> 00:00:49,000
‫فعلاً از promiseها استفاده نمی‌کنیم در نتیجه این قسمت را بر می‌دارم.

8
00:00:49,000 --> 00:00:55,000
‫خب، EventData ما قرار است این شیء resource را برگرداند.
‫اجازه دهید در مرورگر خروجی را ببینیم

9
00:00:55,000 --> 00:01:01,000
‫در اینجا یک خطا داریم. دقت کنید که در اینجا خطای $resourceProvider را دریافت کرده ایم.

10
00:01:01,000 --> 00:01:11,000
‫چونکه $resource در واقع یک ماژول متفاوت است. بنابراین
‫به در app. js لازم است در قسمت ماژولهایمان

11
00:01:11,000 --> 00:01:24,000
‫ngResource را اضافه میکنم و سپس در EventDetails. html این ماژول
‫را اضافه میکنم،

12
00:01:24,000 --> 00:01:33,000
‫که این یکی است، angular-resource. js ؛ اکنون اگر صفحه را ریفرش کنم
‫خطایی دریافت نمی‌کنیم.

13
00:01:33,000 --> 00:01:37,000
‫و داده‌ها را دریافت می‌کنیم، اما اینبار داده‌ها را از $resource می‌گیریم.

14
00:01:37,000 --> 00:01:43,000
‫خب اجازه دهید کارهایی را که در سرویس EventData انجام دادیم را با هم بررسی کنیم.

15
00:01:43,000 --> 00:01:49,000
‫خب، سرویس $resource که استفاده می‌کنیم دارای چندین پارامتر است.
‫اولین پارامتر URL می‌باشد یا در واقع فرمت URL

16
00:01:49,000 --> 00:01:57,000
‫و پارامتر دوم مقدار پیش فرضی است که در route استفاده میشود.

17
00:01:57,000 --> 00:02:06,000
‫خب پارامتر id قرار است با id شیء موردنظر جایگزین شود

18
00:02:06,000 --> 00:02:11,000
‫سپس متد get را برای آن فراخوانی می‌کنیم خب ما $resource را
‫با این پارامترها ایجاد می‌کنیم

19
00:02:11,000 --> 00:02:17,000
‫سپس متد get را فراخوانی می‌کنیم همچنین یک شیء را همراه با آن پاس میدهیم
‫که در واقع شیء ی که id آن برابر با یک است.

20
00:02:17,000 --> 00:02:24,000
‫در واقع id را برای getEvent پاس می‌دهیم و از اون پارامتر استفاده میکنیم.

21
00:02:24,000 --> 00:02:30,000
‫در واقع این یک مثال ساده می‌باشد.

22
00:02:30,000 --> 00:02:37,000
‫بنابراین، شبیه به یک promise عمل می‌کند، اگرچه یک promise نیست.
‫خب در EventController

23
00:02:37,000 --> 00:02:44,000
‫کمی طول خواهید کشید تا درخواست را انجام دهد و یکبار که اینکار را انجام داد
‫event به عنوان نتیجه برگشت داده می‌شود.

24
00:02:44,000 --> 00:02:51,000
‫و شبیه به یک promise عمل میکند، که event را به مقداری که قرار است
‫بلافاصله به صورت همزمان از متد get برگشت داده شود مقداردهی کرده ایم

25
00:02:51,000 --> 00:03:00,000
‫سپس اطلاعات بعد از اتمام فرآیند برگشت داده می‌شوند.

26
00:03:00,000 --> 00:03:07,000
‫اما، درواقع این یک promise نیست و نمی‌توانم. then را بنویسم.

27
00:03:07,000 --> 00:03:12,000
‫اما جالب است بدانید، مقدار برگشتی هم قابل بایند است
‫و هم به عنوان یک شیء event قابل استفاده است.

28
00:03:12,000 --> 00:03:19,000
‫برخلاف promise که در قسمت قبلی بررسی کردیم اگر یک promise را بایند
‫کنید و سعی کنید از آن به صورت local استفاده کنید

29
00:03:19,000 --> 00:03:24,000
‫نمی توانید بنویسید event. name زیرا در واقع یک promise است،
‫اما با resource می‌توانید اینکار را انجام دهید

30
00:03:24,000 --> 00:03:31,000
‫اما، همانند promiseها امکان اجرای یک متد دیگر را بعد از اتمام کار وجود نخواهد داشت.

31
00:03:33,000 --> 00:03:39,000
‫به عنوان مثال ممکن است بخواهید وقتی event برگشت داده شد،
‫سطح دسترسی کاربر را برای آن event بررسی کنید

32
00:03:39,000 --> 00:03:45,000
‫و اگر دسترسی نداشت کاربر را به قسمت دیگری هدایت کند.

33
00:03:45,000 --> 00:03:51,000
‫خب، روشی برای انجام آن با اینکار وجود ندارد.

34
00:03:51,000 --> 00:03:58,000
‫برای انجام این سری کارها باید از promiseها استفاده کنیم. همانند روشی
‫که با سرویس http انجام دادیم.

35
00:03:58,000 --> 00:04:05,000
‫خب، اجازه دهید با استفاده از promiseها اینکار را انجام دهیم.
‫بنابراین یک شیء deferred را ایجاد میکنیم

36
00:04:05,000 --> 00:04:15,000
‫اینبار این متد get بیشتر از دو پارامتر را می‌پذیرد، دو callback
‫success و fail

37
00:04:15,000 --> 00:04:23,000
‫خب، یک resolve و یک reject داریم که توسط شیء deferred

38
00:04:23,000 --> 00:04:29,000
‫وقتیکه نتیجه با موفقیت و یا با شکست برگشت داده شود صدا زده می‌شوند،
‫سپس به یک promise جهت برگشت دادن نیاز داریم.

39
00:04:29,000 --> 00:04:38,000
‫خب، اکنون متد get یک promise را برمیگرداند، کتابخانه promise را نیز اینجا
‫اضافه میکنم.

40
00:04:38,000 --> 00:04:48,000
‫اکنون اجازه دهید نگاهی به کنترلر بیندازیم. خب، بعد از مقداردهی scope. event
‫به مقدار بازگشتی متد getEvent

41
00:04:48,000 --> 00:04:55,000
‫باید پاسخ promise را نیز مشخص کنم.

42
00:04:55,000 --> 00:05:02,000
‫خب، event را در حالت‌های success و failure در خروجی کنسول چاپ میکنم اکنون

43
00:05:02,000 --> 00:05:09,000
‫می توانید سطح دسترسی کاربر را قبل از نمایش جهت مشاهده event تعیین کنید

44
00:05:09,000 --> 00:05:15,000
‫ممکن است کاربر را نیز به یک صفحه لاگین هدایت کنید.

45
00:05:15,000 --> 00:05:26,000
‫اکنون اجازه دهید خروجی را ببینیم. اگر کنسول را باز کنم و صفحه را ریفرش کنم،
‫خواهید دید که خروجی را در کنسول دریافت کرده ایم

46
00:05:26,000 --> 00:05:32,000
‫دقت داشته باشید که این یک resource می‌باشد. بنابراین یک promise دارم
‫و event برگردانده شده

47
00:05:32,000 --> 00:05:41,000
‫در واقع یک resource است. از این resource می‌توانید برای get و save استفاده کنید،

48
00:05:41,000 --> 00:05:47,000
‫اما انجام اینکار را در کنترلر پیشنهاد نمی‌کنم، اما همانند
‫یک شیء event کار خواهد کرد و میتوانید

49
00:05:47,000 --> 00:05:53,000
‫اعمال بایندینگ را برای آن انجام دهید، مثلاً می‌تونید بنویسید
‫scope. event. name و همانند یک شیء event کار خواهد کرد زیرا

50
00:05:53,000 --> 00:05:58,000
‫همانطور که می‌دانید event یک پراپرتی با نام name دارد. اما
‫همچنین دارای متدهای resource نیز می‌باشد.

51
00:05:58,000 --> 00:06:03,000
‫اگر یک خطا داشتیم پاسخ را به صورت یک شیء دریافت می‌کردید

52
00:06:03,000 --> 00:06:07,000
‫که بیشتر شبیه به پاسخ خواهد بود در شیء http داشتیم.

53
00:06:07,000 --> 00:06:12,000
‫خب، این شیء response است، اما هنوز تمام قابلیت‌های آن را
‫به شما نشان نداده ام.

54
00:06:12,000 --> 00:06:17,000
‫نه تنها جهت بازیابی داده‌ها مورد استفاده قرار می‌گیرد بلکه
‫برای ذخیره داده‌ها هم می‌توان از آن استفاده کرد.

55
00:06:17,000 --> 00:06:25,000
‫خب، در سرویس EventData یک متد save را اضافه میکنم.

56
00:06:25,000 --> 00:06:44,000
‫اجازه دهید این شیء $resource را به قسمت بالا منتقل کنم سپس یک متد
‫save ایجاد میکنم

57
00:06:44,000 --> 00:06:52,000
‫که توسط شیء $resource فراخوانی می‌شود. در نهایت لازم است
‫تا promise مان را به عنوان خروجی برگردانیم.

58
00:06:52,000 --> 00:07:00,000
‫بسیار خب، هنوز متد save را در کنترلر ننوشته ایم خب اجازه دهید
‫در کنترلر EditEvent و در این قسمت

59
00:07:00,000 --> 00:07:14,000
‫به جای windows. alert متد save را جایگزین کنیم.

60
00:07:14,000 --> 00:07:19,000
‫لازم است سرویس eventData را به این کنترلر تزریق کنیم.

61
00:07:19,000 --> 00:07:26,000
‫خب، متد save را جهت ذخیره تدارک دیدیم، تنها یک
‫نکته در رابطه با ذخیره کردن یک رویداد وجود دارد

62
00:07:26,000 --> 00:07:35,000
‫اگر به صفحه NewEvent بریم خواهید دید که Id برای event
‫تعیین نشده است،

63
00:07:35,000 --> 00:07:44,000
‫اما اگر مشاهده کنید خواهید دید که در واقع eventها دارای Id هایی هستند،
‫همانطور که مشاهده می‌کنید آنها را با استفاده از Id ذخیره کرده ایم،

64
00:07:44,000 --> 00:07:54,000
‫به طور مثال 1. json یا 2. json و غیره. بنابراین جهت بدست آوردن Id

65
00:07:54,000 --> 00:08:02,000
‫باید به نحوی در هنگام ثبت آخرین Id را داشته باشید و برای آیتم‌های بعدی
‫مقدار آن را یک عدد افزایش دهید.

66
00:08:02,000 --> 00:08:10,000
‫در این بخش اینکار را انجام نمی‌دهیم، بنابراین در داخل EventData
‫وقتیکه یک event را ذخیره می‌کنیم

67
00:08:10,000 --> 00:08:14,000
‫قبل از ذخیره آن مقدار 999 را برای Id در نظر می‌گیریم.

68
00:08:14,000 --> 00:08:29,000
‫خب اکنون اگر در فرم ورود اطلاعات یک event را ایجاد کنم،
‫اکنون در هنگام ذخیره، اجازه دهید کنسول را باز کنیم

69
00:08:29,000 --> 00:08:34,000
‫خب در اینجا باید رفرنس‌ها را اضافه کنم. خب در صفحه NewEvent

70
00:08:34,000 --> 00:08:40,000
‫رفرنس‌های ng-resource و سرویس مان را اضافه میکنم.

71
00:08:40,000 --> 00:08:47,000
‫افزودن این resourceها در کل صفحه کمی سخت به نظر می‌رسد،

72
00:08:47,000 --> 00:08:53,000
‫اما در واقع وقتی قابلیت مسیریابی را به برنامه اضافه میکنم، ساده‌تر خواهند شد

73
00:08:53,000 --> 00:09:01,000
‫از آنجائیکه این برنامه SPA است. بنابراین، در قسمت‌های بعدی
‫این موارد ساده‌تر خواهد شد.

74
00:09:01,000 --> 00:09:10,000
‫خب اجازه دهید صفحه را ریفرش کنم و اطلاعات را مجدداً وارد کنم.

75
00:09:10,000 --> 00:09:16,000
‫خب با کلیک بر روی save پیامی مبنی بر موفق بودن تابع را در خروجی کنسول
‫دریافت میکنیم اگر URL را تغییر دهیم

76
00:09:16,000 --> 00:09:25,000
‫پاسخ ناموفق را دریافت خواهید کرد. اگر به پوشه حاوی رویدادها نگاهی بیندازیم

77
00:09:25,000 --> 00:09:34,000
‫همانطور که مشاهده می‌کنید یک فایل جی سان با نام 999. json داریم.
‫خب، اکنون قادر به ذخیره کردن رویدادمان هستیم. اگر این فایل را باز کنیم

78
00:09:34,000 --> 00:09:39,000
‫حاوی داده‌های رویداد می‌باشد. در نتیجه همه چیز به خوبی کار میکند.

79
00:09:39,000 --> 00:09:45,000
‫چند موضوع دیگر در رابطه با resource‌ها وجود دارد به get و
‫save اشاره کردم

80
00:09:45,000 --> 00:09:52,000
‫سه اکشن دیگر نیز که جزو اکشن‌های توکار سرویس $resource
‫هستند وجود دارد. اکشن query

81
00:09:52,000 --> 00:09:58,000
‫همانند get است با این تفاوت که یک آرایه را برمیگرداند.

82
00:09:58,000 --> 00:10:04,000
‫و همچنین اکشن‌های remove و delete. این اکشن‌ها ‫دقیقاً همانند یکدیگر هستند.

83
00:10:04,000 --> 00:10:14,000
‫که عمل حذف کردن را انجام میدهند. همچنین می‌توانید
‫اکشن خودتان را با یک پارامتر دیگر

84
00:10:14,000 --> 00:10:21,000
‫در اینجا وقتی $resource را ایجاد می‌کنید بنویسید که تنها
‫یک شیء است که نامی را می‌پذیرد

85
00:10:21,000 --> 00:10:28,000
‫در این حالت من getAll را انتخاب کرده ام سپس سه پراپرتی را
‫تعیین می‌کنید،

86
00:10:28,000 --> 00:10:34,000
‫Method،isArray و params.

87
00:10:34,000 --> 00:10:42,000
‫خب، method در این حالت Get است و تعیین کرده ام که یک آرایه را بپذیرد
‫و سپس params که اجازه تعیین

88
00:10:42,000 --> 00:10:47,000
‫پارامترهای از پیش تعیین شده را به شما میدهد که شامل
‫درخواست HTTP خواهد بود.

89
00:10:47,000 --> 00:10:54,000
‫بنابراین، در این حالت زمانیکه درخواست HTTP ایجاد میشود پارامتر

90
00:10:54,000 --> 00:11:01,000
‫something را برابر با foo قرار می‌دهد. در نتیجه این سه قدم نحوه ایجاد
‫اکشن‌های سفارشی می‌باشند.

91
00:11:01,000 --> 00:11:10,000
‫این روش به طور کلی روش ایده آلی نیست، اما این امکان را به شما میدهد
‫تا اکشن هایی که همانند یکدیگر هستند را ایجاد کنید

92
00:11:10,000 --> 00:11:18,000
‫مثلاً اگر بخواهید از اصطلاح retrieve به جای get استفاده کنید.

93
00:11:18,000 --> 00:11:25,000
‫و امکان ارسال پارامترهای سفارشی را به شما میدهد.

94
00:11:25,000 --> 00:11:34,000
‫خب این روش استفاده ازکتابخانه q است.

95
00:11:34,000 --> 00:11:37,000
‫خب، اجازه دهید مطالب گفته شده را با یک آزمون با هم بررسی کنیم.

96
00:11:37,000 --> 00:11:48,000
‫بهترین روش برای دسترسی به یک وب سرویس RESTful چیست؟ http یا resource

97
00:11:48,000 --> 00:11:55,000
‫پاسخ $resource است. resource‌ها در واقع برای دسترسی به وب سرویس‌های
‫RESTful ایجاد شده اند، اگرچه می‌توانید همینکار را با

98
00:11:55,000 --> 00:11:59,000
‫http نیز انجام دهید.

99
00:11:59,000 --> 00:12:05,000
‫آیا امکان بایند کردن promise‌های برگردانده شده توسط q وجود دارد؟

100
00:12:05,000 --> 00:12:13,000
‫بله. کتابخانه q در واقع برای کار با انقیاد داده‌ها طراحی شده است.

101
00:12:13,000 --> 00:12:18,000
‫$resource در کدام ماژول قرار دارد؟

102
00:12:18,000 --> 00:12:25,000
‫در ماژول ngResource، یعنی باید آن را به لیست ماژول هایتان اضافه کنید

103
00:12:25,000 --> 00:12:30,000
‫و ارجاعی را نیز به فایل جاوا اسکریپت آن داشته باشید.


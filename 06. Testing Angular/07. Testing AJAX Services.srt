1
00:00:01,500 --> 00:00:04,500
‫اکنون که درباره چگونگی تست کردن یک سرویس که دارای
‫وابستگی‌هایی است، مطالبی را آموختیم،

2
00:00:04,500 --> 00:00:08,500
‫می‌خواهم نحوه تست یک سرویس که کارش ایجاد درخواست‌های
‫ای‌جکس است، را به شما آموزش دهم.

3
00:00:08,500 --> 00:00:11,500
‫سرویس userResource یک مثال عالی برای آن است.

4
00:00:11,500 --> 00:00:16,500
‫اگر به این سرویس نگاهی بیندازیم، خواهید دید که یک شیء resource
‫را نیاز دارد.

5
00:00:16,500 --> 00:00:22,500
‫شیء resource یک دربرگیرنده برای شیء HTTP است و امکان
‫دسترسی به سرویس‌های RESTful را در اختیار شما قرار می‌دهد.

6
00:00:22,500 --> 00:00:26,500
‫اما، نهایتاً در پشت‌صحنه درخواست‌های ای‌جکس را صدا می‌زند.

7
00:00:26,500 --> 00:00:29,500
‫همانطور که در اینجا مشاهده می‌کنید یک سرویس در اینجا تعریف کرده‌ام
‫سپس یک تابع queryAll را دارم

8
00:00:29,500 --> 00:00:34,500
‫که تمامی متدهای که داخل شیء

9
00:00:34,500 --> 00:00:37,500
‫resource است مانند get را شامل می‌شود.

10
00:00:37,500 --> 00:00:40,500
‫خب، می‌خوام یک تست بنویسم که وضعیت فعلی سرویس‌ام
‫را بررسی کند

11
00:00:40,500 --> 00:00:47,500
‫به طوریکه هر وقت get را فراخوانی کردم، یک درخواست به آدرس
‫URL صحیح ارسال کند.

12
00:00:47,500 --> 00:00:53,500
‫خب درون فایل تست، get را تست میکنم. بنابراین یک describe
‫برای آن ایجاد میکنم.

13
00:00:53,500 --> 00:00:56,500
‫در اینجا یک تست می‌نویسم که هر وقت get را فراخوانی کردم
‫آن را بررسی کند.

14
00:01:01,500 --> 00:01:07,500
‫خب اگر GET را با یک شیء - با نام کاربری bob فراخوانی کنم،
‫آدرس URL که باید فراخوانی شود باید /data/user/bob باشد.

15
00:01:07,500 --> 00:01:12,500
‫مجدداً تابع inject را فراخوانی میکنم به طوریکه می‌توانم به شیء
‫userResource دسترسی داشته باشم.

16
00:01:12,500 --> 00:01:17,500
‫در اینجا یک پارامتر دوم را برای این تابع اضافه میکنم.

17
00:01:17,500 --> 00:01:20,500
‫پارامتری که می‌خواهم اضافه کنم، httpBackend است.

18
00:01:20,500 --> 00:01:26,500
‫این یک سرویس ویژه است که کتابخانه Angular Mocks آن را ارائه میدهد
‫که امکان تست شیء XHR را به ما میدهد.

19
00:01:26,500 --> 00:01:30,500
‫این شیء هر فرخوانی برای شیء XHR را پیگیری میکند
‫و به من این امکان را میدهد تا این فرخوانی‌ها را بررسی کنم

20
00:01:30,500 --> 00:01:33,500
‫همچنین درستی آن را بررسی کنم.

21
00:01:33,500 --> 00:01:38,500
‫همچنین امکان تعیین داده‌هایی را که می‌خواهم به آنها پاسخ
‫دهم را در اختیار من قرار میدهد.

22
00:01:38,500 --> 00:01:44,500
‫روشی که می‌توانم به شیء httpBackend برای پاسخ‌دهی استفاده کنم
‫فراخوانی تابع when آن است.

23
00:01:44,500 --> 00:01:50,500
‫اولین پارامتر فعل آن است و دومین پارامتر یک URL است.

24
00:01:50,500 --> 00:01:53,500
‫سپس تابع respond را فراخوانی میکنم.

25
00:01:53,500 --> 00:01:58,500
‫در این حالت، تابع respond را با یک شیء که دارای ویژگی name است
‫فراخوانی میکنم، که در اینجا Robert است.

26
00:01:58,500 --> 00:02:04,500
‫اگر به این URL درخواستی ارسال کنم این شیء بازگشت داده می‌شود.

27
00:02:04,500 --> 00:02:10,500
‫خب اجازه دهید جلو بریم و تابعی که به این URL درخواست ارسال میکند
‫را فراخوانی کنیم.

28
00:02:10,500 --> 00:02:14,500
‫هنوز تمام نشده است. قسمت مهم شبیه‌سازی
‫رفتار asynchronous برای درخواست‌های

29
00:02:14,500 --> 00:02:18,500
‫XHR است.

30
00:02:18,500 --> 00:02:23,500
‫با فراخوانی متد flush در شیء httpBackend اینکار را انجام میدهم.

31
00:02:23,500 --> 00:02:26,500
‫در اینجا قرار است به آن درخواست پاسخ دهد.

32
00:02:26,500 --> 00:02:32,500
‫اکنون یک expectation برای آن خواهیم نوشت. البته مثل همیشه
‫باید از لود شدن ماژول‌های

33
00:02:32,500 --> 00:02:36,500
‫این سرویس مطمئن شوم.

34
00:02:36,500 --> 00:02:41,500
‫خب، اجازه دهید این تست را اجرا کنیم و خروجی را ببینیم
‫همانطور که مشاهده میکنید تست پاس شده است.

35
00:02:41,500 --> 00:02:46,500
‫خب اجازه دهید برای fail شدن تست کد را مقداری تغییر دهیم.

36
00:02:46,500 --> 00:02:50,500
‫میدانم که یک درخواست برای این آدرس ارسال میکند، اما اجازه دهید
‫آدرس URL را تغییر دهیم.

37
00:02:50,500 --> 00:02:54,500
‫خب وقتی درخواستی در اینحالت ارسال شود، httpBackend
‫یک استثنا صادر میکند،

38
00:02:54,500 --> 00:02:59,500
‫زیرا قرار است یک درخواست get برای آدرسی که
‫در قسمت expect تعیین کردیم‌ایم، دریافت کند

39
00:02:59,500 --> 00:03:07,500
‫خب، همانطور که مشاهده میکنید یک خطا دریافت کردیم اجازه دهید
‫متن پیام را بررسی کنیم.

40
00:03:15,500 --> 00:03:20,500
‫خب، آدرس را تغییر میدهم سپس تست با موفقیت پاس میشود.

41
00:03:20,500 --> 00:03:25,500
‫در این قسمت چگونگی با تست کردن سرویس‌هایی که درخواست‌های
‫ای‌جکس را ایجاد می‌کنند آشنا شدیم.


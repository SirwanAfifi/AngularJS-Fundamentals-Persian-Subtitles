1
00:00:01,000 --> 00:00:05,000
‫در این قسمت چگونگی تست کردن کنترلرها را بررسی خواهیم کرد.

2
00:00:05,000 --> 00:00:09,000
‫از آنجائیکه کنترلرها قلب هر برنامه Angularی هستند. در نتیجه باید ابتدا

3
00:00:09,000 --> 00:00:14,000
‫چگونگی تست کردن کنترلرها را بررسی کنیم. خب در اینجا کنترلر EventListController
‫را برای تست انتخاب کرده‌ام.

4
00:00:14,000 --> 00:00:19,000
‫به این دلیل که این کنترلر کارهای کمتری را انجام میدهد

5
00:00:19,000 --> 00:00:24,000
‫در نتیجه دو تست را برای آن مینویسیم.

6
00:00:24,000 --> 00:00:28,000
‫بدون اینکه درگیر جزئیات عملکرد این کنترلر شویم.

7
00:00:28,000 --> 00:00:30,000
‫خب با نگاهی به این کنترلر خواهید دید که دو کار را انجام میدهد.

8
00:00:30,000 --> 00:00:37,000
‫ابتدا، شیء events درون scope مقداردهی می‌شود. که با فراخوانی
‫eventData. getAllEvents اینکار صورت می‌گیرد.

9
00:00:37,000 --> 00:00:42,000
‫خب اکنون یک مورد برای تست موجود است. موردی بعدی این تابع
‫navigateToDetails است.

10
00:00:42,000 --> 00:00:46,000
‫وقتی این تابع فراخوانی شود، به یک آدرس جدید هدایت می‌شود.

11
00:00:46,000 --> 00:00:50,000
‫آدرس این URL براساس پارامتری که به این تابع ارسال شده، می‌باشد.

12
00:00:50,000 --> 00:00:55,000
‫خب میخواهم تستی بنویسم که درستی فراخوانی location. url
‫را برای من چک کند.

13
00:00:55,000 --> 00:01:00,000
‫اکنون میدانم که چه قسمت‌هایی را باید تست کنم، درون فایل تست
‫تعدادی تست را تعریف میکنم.

14
00:01:00,000 --> 00:01:05,000
‫همانطور که مشاهده میکنید در اینجا یک فایل خالی ایجاد کرده‌ام. 
‫این فایل درون پوشه unit در پوشه test قرار دارد.

15
00:01:05,000 --> 00:01:10,000
‫همانطور که قبلاً اشاره کردم از Jasmine برای تست‌ها استفاه میکنم. 
‫اگر قبلاً با Jasmine کار نکرده‌اید و نیاز به مرور دارید

16
00:01:10,000 --> 00:01:15,000
‫لطفا دوره من را تحت عنوان testing client-side JavaScript و بخش مربوط به
‫Jasmine را مشاهده کنید.

17
00:01:15,000 --> 00:01:18,000
‫ابتدا، میخواهم ویژگی events را تست کنم و ببینم که به درستی
‫مقداردهی شده است.

18
00:01:18,000 --> 00:01:24,000
‫خب به کد قبلی بر میگردم، در اینجا events به نتیجه حاصل
‫از eventData. getAllEvents مقداردهی شده است.

19
00:01:24,000 --> 00:01:31,000
‫اکنون میخواهم تستی بنویسم که درستی این مقداردهی را تائید کند.

20
00:01:31,000 --> 00:01:36,000
‫خب، باید یکسری event به صورت ساختگی ایجاد کنم که توسط
‫فراخوانی getAllEvents برگردانده میشوند.

21
00:01:36,000 --> 00:01:42,000
‫یک متغییر با نام mockEvents تعریف میکنم.

22
00:01:42,000 --> 00:01:47,000
‫خب یک expect را برای آن می‌نویسم.

23
00:01:47,000 --> 00:01:51,000
‫یکی از مواردی که در طول نوشتن این تست به آن توجه میکنم
‫مشاهده نتیجهٔ اجرای این تست است

24
00:01:51,000 --> 00:01:58,000
‫به این جهت که ببینیم که آیا تست با موفقیت پاس میشود یا خیر. Karma اکنون متصل نیست
‫یکبار دیگر آن را ریستارت میکنم.

25
00:01:58,000 --> 00:02:06,000
‫اینکار Karma را اجرا میکند. خب نتیجه پاس نشد

26
00:02:06,000 --> 00:02:11,000
‫زیرا هنوز نوشتن تست ما به پایان نرسیده است. موردی که توجه ما را جلب خواهد کرد

27
00:02:11,000 --> 00:02:14,000
‫یک خطا است، زیرا شیء scope هنوز تعریف نشده است.

28
00:02:14,000 --> 00:02:20,000
‫خب اجازه دهید آن را تعریف کنیم. در اینجا آن را تعریف میکنم
‫زیرا میخواهم آن را در

29
00:02:20,000 --> 00:02:27,000
‫beforeEach تغییر دهم. مشکل بعدی که دارم این است که
‫کنترلرم هنوز ایجاد نشده است.

30
00:02:27,000 --> 00:02:31,000
‫اما قبل از اینکه کنترلر را ایجاد کنم، باید یک سازنده برای آن داشته باشم

31
00:02:31,000 --> 00:02:37,000
‫که توسط انگولار به من تحویل داده میشود سپس وابستگی‌های
‫موردنیاز را به آن تزریق میکنم.

32
00:02:37,000 --> 00:02:40,000
‫خب اینکار را توسط یک متد ویژهٔ انگولار انجام میدهم
‫این متد اجازه ایجاد کنترلرها را به ما میدهد.

33
00:02:40,000 --> 00:02:47,000
‫بنابراین یک تابع beforeEach ایجاد میکنم و درون آن از انگولار درخواست میکنم

34
00:02:47,000 --> 00:02:52,000
‫که شیء مخصوص را برای ایجاد کنترلرها در اختیار من قرار دهد.

35
00:02:52,000 --> 00:02:58,000
‫اینکار را توسط متد inject انجام میدهم که در واقع یک متد سراسری داخل
‫تست‌هایم است.

36
00:02:58,000 --> 00:03:03,000
‫زیرا تنظیمات Karma اگر به خاطر داشته باشید

37
00:03:03,000 --> 00:03:06,000
‫تمام کتابخانه‌های انگولار به دایرکتوری lib منتقل کردم.

38
00:03:06,000 --> 00:03:16,000
‫اینکار توسط angular-mocks انجام میشود.

39
00:03:16,000 --> 00:03:20,000
‫این کتابخانه یک تابع سراسری با نام inject را ایجاد میکند.

40
00:03:20,000 --> 00:03:30,000
‫سپس از انگولار درخواست میکنم که اشیاء موردنظر را در اختیار من قرار دهد
‫شیء مورد نظر در اینجا $controller است.

41
00:03:30,000 --> 00:03:34,000
‫این شیء اجازه نمونه‌سازی یک کنترلر را به من میدهد. 
‫مشکل اینجاست که من نمی‌خواهم کنترلرم درون

42
00:03:34,000 --> 00:03:38,000
‫حلقه beforeEach نمونه‌سازی شود. درون تست اینکار را میخواهم انجام دهم.

43
00:03:38,000 --> 00:03:42,000
‫به این روش در هر تستی، می‌توانم از وابستگی‌های مختلفی
‫برای کنترلر استفاده کنم.

44
00:03:42,000 --> 00:03:47,000
‫یک متغیر با نام controllerConstructor تعریف میکنم همچنین

45
00:03:47,000 --> 00:03:50,000
‫یک علامت $ قبل از آن قرار میدهم جهت یادآوری که این یک شیء انگولار است.

46
00:03:50,000 --> 00:03:55,000
‫اکنون درون متد beforeEach این متغیر را برابر با $controller قرار میدهم.

47
00:03:55,000 --> 00:04:02,000
‫اکنون متغیر را دارم و میتوانم کنترلرم را درون تست‌م نمونه‌سازی کنم.

48
00:04:02,000 --> 00:04:06,000
‫اینکار را با فراخوانی آن شبیه به یک تابع انجام میدهم و نام کنترلر که میخواهم
‫نمونه‌سازی کنم، پاس میدهم.

49
00:04:06,000 --> 00:04:11,000
‫در این حالت از آنجائیکه EventListController را تست میکنیم، رشته
‫EventListController را به آن پاس میدهم.

50
00:04:11,000 --> 00:04:14,000
‫این تابع یک پارامتر دوم نیز دریافت میکند که در واقع یک شیء
‫برای وابستگی‌ها کنترلر است.

51
00:04:14,000 --> 00:04:18,000
‫که میتوانیم وابستگی‌های ساختگی را ارائه دهیم.

52
00:04:18,000 --> 00:04:22,000
‫اجازه دهید در کنترلرمان، وابستگی‌ها را ببنیم.

53
00:04:22,000 --> 00:04:27,000
‫این کنترلر سه وابستگی را دریافت میکند، $scope
‫$location و eventData

54
00:04:27,000 --> 00:04:34,000
‫در اینجا متغیرها را برابر با یک شیء خالی قرار میدهم.

55
00:04:34,000 --> 00:04:38,000
‫اکنون این تنظیمات را دارم، میتوانم تست را اجرا کنم
‫اما میدونم که با شکست مواجه خواهد شد

56
00:04:38,000 --> 00:04:42,000
‫زیرا شیء scopeی که درون expect مشخص کردم به شیء scope

57
00:04:42,000 --> 00:04:48,000
‫درون کنترلر مقداردهی نشده است. کاری که باید انجام دهم
‫ارائه کنترلر با یک شیء scope واقعی است

58
00:04:48,000 --> 00:04:50,000
‫اما در حالت کلی نمی‌توانم هیچ شیء را ارائه دهم.

59
00:04:50,000 --> 00:04:53,000
‫باید از انگولار درخواست کنیم که یک شیء scope را در اختیارمان
‫قرار دهد.

60
00:04:53,000 --> 00:05:00,000
‫خب درون متد beforeEach یک پارامتر دوم با نام $rootScope اضافه میکنم.

61
00:05:00,000 --> 00:05:04,000
‫بخاطر تابع inject، انگولار یک شیء $rootScope را در اختیار من قرار میدهد.

62
00:05:04,000 --> 00:05:08,000
‫اکنون که شیء $rootScope را دارم، میتوانم یک شیء scope ایجاد کنم.

63
00:05:08,000 --> 00:05:12,000
‫اینکار را با فراخوانی تابع $new انجام میدهم.

64
00:05:12,000 --> 00:05:20,000
‫اکنون که شیء scope را دارم، میتوانم شیء موردنظر را پاس دهم.

65
00:05:20,000 --> 00:05:26,000
‫اکنون اجازه دهید تست را اجرا کرده و ببنیم چه اتفاقی خواهد افتاد.

66
00:05:26,000 --> 00:05:33,000
‫خب، تست هنوز با شکست مواجه است، اجازه دهید دلیل آنرا
‫بررسی کنیم.

67
00:05:33,000 --> 00:05:37,000
‫خب، این خطا در واقع بیانگر این است که EventListController یک تابع نیست.

68
00:05:37,000 --> 00:05:41,000
‫زیرا انگولار هنوز ماژول‌های موردنیاز را برای آن بارگذاری نکرده است.

69
00:05:41,000 --> 00:05:46,000
‫خب، درون تست ماژول‌های موردنیاز را برای کنترلرم تعریف میکنم.

70
00:05:46,000 --> 00:05:52,000
‫اینکار را با یک تابع beforeEach دیگر انجام میدهم که از یک تابع ویژه دیگر
‫با نام module استفاده میکند.

71
00:05:52,000 --> 00:05:57,000
‫سپس به تابع ماژول پارامتری که در واقع نام ماژول می‌باشد را پاس می‌دهم.

72
00:05:57,000 --> 00:06:00,000
‫در اینحالت، eventsApp نامی ماژول برنامه‌مان می‌باشد.

73
00:06:00,000 --> 00:06:09,000
‫خب فایل را ذخیره کرده و تست را مجدداً اجرا می‌کنم. 
‫هنوز با مشکل مواجه شده است. اجازه دهید به پیام نگاه کنیم و علت آنرا پیدا کنیم.

74
00:06:09,000 --> 00:06:16,000
‫خب، متد getAllEvents موجود نیست. اگر به کنترلرم نگاه کنم
‫eventData به عنوان یک شیء

75
00:06:16,000 --> 00:06:21,000
‫که دارای متدی با نام getAllEvents است، در نظر گرفته شده است، اما
‫اگر به جزئیات آن در تست نگاهی بیندازیم خواهیم دید که

76
00:06:21,000 --> 00:06:26,000
‫eventData تنها یک شیء خالی است. بنابراین متدی با نام getAllEvent
‫وجود ندارد.

77
00:06:26,000 --> 00:06:31,000
‫خب، اجازه دهید یک شیء eventData را که دارای متدی با نام getAllEvent
‫است را فراهم کنیم در اینحالت

78
00:06:31,000 --> 00:06:36,000
‫در زمان نیاز به مقادیر آن می‌توانیم کنترلی بر روی آن داشته باشیم
‫که در اینحالت شیء mockEvents خواهد بود.

79
00:06:36,000 --> 00:06:40,000
‫خب، درون تابع beforeEach

80
00:06:40,000 --> 00:06:47,000
‫شیء mockEventData را آماده میکنم. برای اینکار از sinon. stub استفاده میکنم
‫و یک تابع را

81
00:06:47,000 --> 00:06:54,000
‫با نام getAllEvents در اختیار آن قرار میدهم.

82
00:06:54,000 --> 00:07:01,000
‫سپس درون تستم به عنوان یک شیء eventData آن را آماده می‌کنم.

83
00:07:01,000 --> 00:07:05,000
‫اکنون، تست‌ها را مجدداً اجرا میکنم. بسیار خوب هنوز هم یک خطا داریم.

84
00:07:05,000 --> 00:07:10,000
‫همانطور که از متن خطا مشخص است به صورت خالی در نظر گرفته شده است.

85
00:07:10,000 --> 00:07:17,000
‫دلیل این است که شیء getAllEvents مقدار undefined را برمیگرداند

86
00:07:17,000 --> 00:07:23,000
‫بنابراین درون تست‌م

87
00:07:23,000 --> 00:07:27,000
‫این خط کد را اضافه میکنم

88
00:07:32,000 --> 00:07:37,000
‫اکنون اجازه دهید تست را مجدداً اجرا کنم. عالیه،
‫اکنون تست ما با موفقیت انجام شد.

89
00:07:37,000 --> 00:07:42,000
‫بنابراین، همانطور که مشاهده می‌کنید یکی از عالی‌ترین مزایای انگولار
‫این است که می‌توانیم اشیاء mock را

90
00:07:42,000 --> 00:07:48,000
‫برای هر وابستگی در کنترلر ارائه دهیم. این کنترلر سه وابستگی دارد
‫و دقیقاً اشیاءی را خواستیم

91
00:07:48,000 --> 00:07:52,000
‫در اختیار تست قرار دادیم

92
00:07:55,000 --> 00:08:01,000
‫اکنون که تست با موفقیت انجام شده است، اجازه دهید به کنترلرمان برگردیم
‫و نگاهی به دیگر قسمت‌هایی که می‌خواهیم برایشان تست بنویسیم، داشته باشیم،

93
00:08:01,000 --> 00:08:06,000
‫که در اینجالت متد navigateToDetails خواهد بود. موردی که می‌خواهم تست کنم

94
00:08:06,000 --> 00:08:14,000
‫استفاده صحیح از آدرس URL در زمان فرخوانی آن است. بنابراین اجازه دهید
‫یک تست جدید بنویسم.

95
00:08:14,000 --> 00:08:20,000
‫اکنون، برای اجرای این تست، باید کنترلرم را آماده کنم،

96
00:08:20,000 --> 00:08:24,000
‫اما بعد از اینکار می‌خواهم

97
00:08:24,000 --> 00:08:27,000
‫متد navigateToDetails را در scope فراخوانی کنم.

98
00:08:27,000 --> 00:08:32,000
‫با نگاهی به کنترلر خواهید دید که یک شیء event را از ورودی دریافت خواهد کرد.

99
00:08:32,000 --> 00:08:38,000
‫بنابراین، یک placeholder در این لحظه برای آن تعیین میکنم
‫سپس تست را می‌نویسم.

100
00:08:38,000 --> 00:08:44,000
‫می‌خواهم درست بودن URL را بررسی کنم. بهترین حالت برای اینکار
‫بررسی این خط است،

101
00:08:44,000 --> 00:08:47,000
‫فراخوانی تابع URL سپس اینکه بعد از آن چه پارامتری به آن پاس داده می‌شود.

102
00:08:47,000 --> 00:08:51,000
‫بنابراین یک شیء با نام mocklocation ایجاد میکنم.

103
00:08:51,000 --> 00:08:55,000
‫و با یک آدرس URL خاص، آنرا بررسی میکنم.

104
00:08:55,000 --> 00:09:03,000
‫دراینحالت، اجازه دهید که برای شیء مورد نظر آی‌دی 23 را در نظر بگیریم
‫که یک URL برای آن تولید خواهد کرد.

105
00:09:03,000 --> 00:09:05,000
‫اکنون دو مشکل ممکن است رخ دهد.

106
00:09:05,000 --> 00:09:10,000
‫مورد اول اینکه شیء mocklocation را هنوز نداریم. 
‫مشکل دوم: شیء event

107
00:09:10,000 --> 00:09:16,000
‫هم هنوز وجود ندارد. خب اجازه دهید این شیء را ایجاد کنیم.

108
00:09:16,000 --> 00:09:21,000
‫از آنجائیکه از یک شیء با آی‌دی 23 استفاده میکنم،
‫آی‌دی 23 را در اینجا می‌نویسم.

109
00:09:21,000 --> 00:09:24,000
‫شیء mocklocation را نیز باید ایجاد کنم.

110
00:09:24,000 --> 00:09:28,000
‫این شیء یک تابع دارد. یک تابع URL

111
00:09:28,000 --> 00:09:35,000
‫اکنون که mocklocation ایجاد شده است، می‌خواهم پارامتر location را
‫برای کنترلر فراهم کنم.

112
00:09:35,000 --> 00:09:38,000
‫حالا اجازه دهید خروجی را ببینیم.

113
00:09:38,000 --> 00:09:48,000
‫عالیه، تست ما بلافاصله با موفقیت انجام شد. اجازه دهید
‫برای یک آی‌دی دیگر نیز آنرا بررسی کنیم.

114
00:09:48,000 --> 00:09:53,000
‫اکنون تست با شکست مواجه شده است زیرا تابع URL
‫با پارامتر درست فراخوانی نشده است.

115
00:09:53,000 --> 00:09:57,000
‫این مقدمات تست کنترلرها در انگولار است.

116
00:09:57,000 --> 00:10:02,000
‫توجه داشته باشید که استفاده از تزریق‌وابستگی
‫و Sinnon (برای ایجاد اشیاء mock) چقدر آسان است

117
00:10:02,000 --> 00:10:08,000
‫به طوری که می‌توانیم سناریوهای مختلفی برای کنترلرهایمان
‫بنویسیم.

118
00:10:08,000 --> 00:10:11,000
‫این یکی از ویژگی‌های فریم‌وریک قدرتمند انگولار است.

119
00:10:11,000 --> 00:10:17,000
‫در زمان تست می‌توانیم هر کدام مولفه‌ها را مخفی کنیم
‫و هر کدام را تست کنیم.

120
00:10:17,000 --> 00:10:20,000
‫نباید درباره پیچیدگی وابستگی‌ها نگران باشیم.

121
00:10:20,000 --> 00:10:23,000
‫می‌توانیم از اشیاء mock استفاده کنیم
‫و تنظیمات دلخواه‌مان را،

122
00:10:23,000 --> 00:10:27,000
‫برای تست کردن کنترلرهایمان در هر شرایطی انجام دهیم.

123
00:10:27,000 --> 00:10:31,000
‫این جادوی تزریق وابستگی است، تکنیکی که در سمت سرور نیز برای

124
00:10:31,000 --> 00:10:36,000
‫قابل تست کردن تست‌ها مورد استفاده قرار گرفته است.


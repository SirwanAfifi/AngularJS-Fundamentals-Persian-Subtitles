1
00:00:02,000 --> 00:00:07,000
‫اولین موردی که باید به آن توجه کنیم پی‌بردن به نحوهٔ کارکرد دایرکتیوی
‫است که می‌خواهیم آن را تست کنیم.

2
00:00:07,000 --> 00:00:11,000
‫خود دایرکتیو ساده است. هیچ کدی درون آن وجود ندارد.

3
00:00:11,000 --> 00:00:16,000
‫مهمترین قسمت آن داخل تمپلیت است. بنابراین اجازه دهید نگاهی به
‫تمپلیت بیندازیم.

4
00:00:16,000 --> 00:00:22,000
‫همانطور که مشاهده می‌کنید تمپلیت دارای دو بخش اصلی است. داده‌هایی
‫را رندر کرده سپس یک رویداد کلیک را متصل میکند.

5
00:00:22,000 --> 00:00:27,000
‫خب، دو تست برای اینکار خواهیم نوشت. یکی از آنها رندر شدن دایرکتیو را تست میکند

6
00:00:27,000 --> 00:00:31,000
‫و دیگری اتصال رویداد کلیک را تست میکند.

7
00:00:31,000 --> 00:00:35,000
‫البته، قبل از نوشتن تست‌ها، باید سرور Karam را راه‌اندازی کنیم

8
00:00:35,000 --> 00:00:43,000
‫تا pass و fail شدن تست‌ها را ببینیم.

9
00:00:43,000 --> 00:00:51,000
‫بعد از آن، خواهیم دید که تمام 8 تست پاس میشوند اکنون می‌توانیم
‫تست‌های جدید را اضافه کنیم.

10
00:00:51,000 --> 00:00:57,000
‫ابتدا یک تست برای بررسی اینکه آیا دایرکتیو به درستی رندر شده را خواهیم نوشت.

11
00:00:57,000 --> 00:01:00,000
‫خب، هنوز هیچ کدی ننوشته‌ایم،

12
00:01:00,000 --> 00:01:05,000
‫بنابراین مطمئن نیستم چه نوع متغییرهایی برای آن نیاز خواهم داشت.

13
00:01:05,000 --> 00:01:09,000
‫اما نهایتاً میدونم که باید تعدادی نود DOM بررسی شوند.

14
00:01:09,000 --> 00:01:14,000
‫بنابراین فرض می‌کنیم که به یک نود DOM دسترسی داریم و نام آن را
‫el (به معنی عنصر یا المنت) خواهیم گذاشت.

15
00:01:14,000 --> 00:01:16,000
‫سپس مقدار ویژگی text آن را دریافت میکنیم

16
00:01:16,000 --> 00:01:22,000
‫اکنون برای بررسی یک رشته خاص داخل آن، آن را با یک شرط چک میکنیم.

17
00:01:22,000 --> 00:01:31,000
‫خب اکنون می‌دانم که دایرکتیومان نام رخداد را چاپ میکند. بنابراین یک رشته
‫با عنوان Event name اضافه میکنیم.

18
00:01:35,000 --> 00:01:41,000
‫اکنون اگر این فایل را ذخیره کنم، تست‌ها اجرا شده و با شکست مواجه میشوند
‫زیرا متغیری با نام el وجود ندارد.

19
00:01:41,000 --> 00:01:47,000
‫اکنون وقت این است که تنظیمات را برای تست دایرکتیو انجام دهم.

20
00:01:47,000 --> 00:01:50,000
‫اینکار را با ایجاد متغیر el شروع میکنم، فعلاً خطاهایی را داریم.

21
00:01:50,000 --> 00:01:55,000
‫سپس ماژولی که این دایرکتیو قسمتی از آن است را اضافه خواهم کرد.

22
00:01:55,000 --> 00:01:59,000
‫قسمت بعدی واضح نیست، اما خیلی مهم است. باید به انگولار بگویم
‫که تمپلیت مربوط به این

23
00:01:59,000 --> 00:02:06,000
‫دایرکتیو را نیاز داریم. همانند قسمت‌های قبلی اینکار را انجام میدهم.

24
00:02:06,000 --> 00:02:11,000
‫اما فعلاً، به جای تعیین نام ماژول، مسیر تمپلیت را مشخص میکنم.

25
00:02:11,000 --> 00:02:16,000
‫البته، این تست هنوز پاس نخواهد شد زیرا در واقع این دایرکتیو را ایجاد و اجرا نمی‌کنم.

26
00:02:16,000 --> 00:02:20,000
‫خب یک تابع beforeEach دیگر ایجاد خواهم کرد و در داخل آن تمام

27
00:02:20,000 --> 00:02:24,000
‫را برای اجرا و ایجاد دایرکتیو خواهیم نوشت.

28
00:02:24,000 --> 00:02:28,000
‫مجدداً از تابع inject استفاده میکنم تا انگولار مواردی که نیاز دارم را در اختیارم
‫قرار دهد.

29
00:02:28,000 --> 00:02:34,000
‫در این حالت، دو چیز نیاز دارم. اولی یک کامپایلر است و دومی یک شیء rootScope است

30
00:02:40,000 --> 00:02:46,000
‫اکنون داخل این beforeEach دو کار را باید انجام دهیم. اول اینکه scope را تنظیم کنیم

31
00:02:46,000 --> 00:02:53,000
‫دوم اینکه، باید دایرکتیو را ایجاد و کامپایل کنیم. اجازه دهید ابتدا scope را تنظیم کنیم.

32
00:02:53,000 --> 00:02:57,000
‫یک متغیر در اینجا با یک نام مناسب ایجاد میکنم.

33
00:02:57,000 --> 00:03:04,000
‫اکنون اگر به تمپلیت برگردیم، همانطور که مشاهده میکنید تمام اتصالات
‫برای یک شیء با نام event درون scope هستند.

34
00:03:04,000 --> 00:03:07,000
‫خب، به scope بر میگردیم و یک شیء event ایجاد خواهیم کرد.

35
00:03:07,000 --> 00:03:12,000
‫اکنون شیء event به چندین ویژگی مختلف نیاز دارد.

36
00:03:12,000 --> 00:03:20,000
‫یک name نیاز دارد و مقدار آن را Event Name مقداردهی میکنیم، که مقداری است
‫که در تست تعیین کردیم.

37
00:03:20,000 --> 00:03:27,000
‫به یک date نیز نیاز دارد، در اینجا یک رشته تصادفی را برای آن تعیین میکنم.

38
00:03:27,000 --> 00:03:35,000
‫سپس یک time و یک location این خود یک شیء است که دارای یک
‫آدرس، شهر و یک استان است.

39
00:03:35,000 --> 00:03:41,000
‫خب، تنظیمات scope را انجام دادیم. کدها تا اینجا ساده و روان بودند.

40
00:03:41,000 --> 00:03:44,000
‫اکنون وقت آن است تا دایرکتیومان را کامپایل کنیم.

41
00:03:44,000 --> 00:03:48,000
‫ابتدا، یک نود DOM غیر متصل ایجاد خواهم کرد و متغیر el را در آن قرار میدهم.

42
00:03:48,000 --> 00:03:53,000
‫تابع elment در انگولار یک wrapper برای jQuery است.

43
00:03:53,000 --> 00:03:57,000
‫اکنون باید HTML مطابق با تمپلیت را قرار دهیم.

44
00:03:57,000 --> 00:04:01,000
‫خب، این خط از کد یک عنصر غیر متصل داخل متغیر el ایجاد خواهد کرد

45
00:04:01,000 --> 00:04:05,000
‫که یک عنصر با نام event-thumbnail دارد. اکنون نود DOM ایجاد شده را داریم،

46
00:04:05,000 --> 00:04:08,000
‫باید به انگولار بگویم تا این نود DOM را برای ما کامپایل کرده و آن را به scope اعمال کند.

47
00:04:08,000 --> 00:04:13,000
‫با فراخوانی تابع compile اینکار را انجام میدهم

48
00:04:13,000 --> 00:04:17,000
‫سپس عنصر را به آن پاس میدهم.

49
00:04:17,000 --> 00:04:22,000
‫اکنون تابع getter را با مقدار scope فراخوانی میکنم. با اینکار scope و عنصر
‫دریافت شده،

50
00:04:22,000 --> 00:04:25,000
‫کامپایل شده و به scope اعمال میشوند.

51
00:04:25,000 --> 00:04:30,000
‫اکنون باید نتایج حاصل از این فرآیند کامپایل را در اختیار انگولار قرار دهیم.

52
00:04:30,000 --> 00:04:34,000
‫تا بر روی عنصر اعمال کند. که با فراخوانی digest درون scope انجام میشود.

53
00:04:34,000 --> 00:04:39,000
‫این فراخوانی با انگولار خواهد گفت HTML را بروزرسانی کند. اکنون اجازه دهید
‫فایل را ذخیره کرده و تست را اجرا کنیم.

54
00:04:39,000 --> 00:04:44,000
‫همانطور که مشاهده میکنید تست در حال پاس شدن است. اکنون اجازه دهید
‫چند لحظه درباره عیب‌یابی صحبت کنیم.

55
00:04:44,000 --> 00:04:51,000
‫برای مثال فرض کنید نام دایرکتیو را اشتباه وارد کرده‌اید و به صورت تصادفی
‫عدد 2 را در انتهای آن قرار داده‌اید.

56
00:04:51,000 --> 00:04:55,000
‫وقتی این فایل را ذخیره کنم، تست fail خواهد شد. فرض کنید به اشتباه پی‌نبرده‌ام،

57
00:04:55,000 --> 00:05:00,000
‫میخواهم بدانم چرا تست fail شده است. یک تکنیک ساده بر بررسی
‫درست کامپایل شدن دایرکتیو وجود دارد

58
00:05:00,000 --> 00:05:05,000
‫بعد از $digest

59
00:05:05,000 --> 00:05:10,000
‫HTML را در خروجی لاگ میکنیم. el یک شیء jQuery است

60
00:05:10,000 --> 00:05:16,000
‫بنابراین اولین نود DOM داخل آن را دریافت میکنم و ویژگی outerHTML
‫آن را نمایش میدهیم.

61
00:05:16,000 --> 00:05:24,000
‫وقتی فایل را ذخیره میکنم، در خروجی HTML دریافتی را خواهیم دید.

62
00:05:24,000 --> 00:05:27,000
‫همانطور که در اینجا میبینید HTML کامپایل نشده است.

63
00:05:27,000 --> 00:05:30,000
‫بنابراین میدونم که در فرآیند کامپایل ایرادی وجود دارد.

64
00:05:30,000 --> 00:05:35,000
‫اینکار موجب میشود تا نگاهی به دایرکتیو بیندازم.

65
00:05:35,000 --> 00:05:42,000
‫سپس در اینجا بر روی Scroll to end کلیک میکنم و تست را ذخیره میکنم
‫اکنون تست پاس خواهد شد.

66
00:05:42,000 --> 00:05:50,000
‫خب اجازه دهید تست دیگر را اضافه کنیم. اکنون در این تست میخواهم
‫درستی انقیاد داده‌ها را بررسی کنم.

67
00:05:50,000 --> 00:05:54,000
‫برای تست binding باید بر روی عنصر کلیک کنم.

68
00:05:54,000 --> 00:05:59,000
‫بنابراین el. click را فراخوانی میکنم. اینکار عمل کلیک را برای عنصر
‫شبیه‌سازی میکند و هر event handler برای

69
00:05:59,000 --> 00:06:05,000
‫آن عنصر اجرا خواهد کرد.

70
00:06:05,000 --> 00:06:11,000
‫با نگاهی به تمپلیت. خواهیم دید که تابعی که فراخوانی میکند showDetails است.

71
00:06:11,000 --> 00:06:15,000
‫بنابراین آن را چک میکنیم.

72
00:06:15,000 --> 00:06:24,000
‫stub مربوط را مقداردهی میکنم.

73
00:06:24,000 --> 00:06:27,000
‫اکنون این متغیر را در معرض دید تست نیز قرار میدهم

74
00:06:33,000 --> 00:06:38,000
‫اکنون باید اتصالات دایرکتیو را ایجاد کرده و به آن بگوئیم که وقتی showDetails
‫فراخوانی شد، چه تابعی فراخوانی شود.

75
00:06:38,000 --> 00:06:43,000
‫درون HTML یک ویژگی show-details اضافه میکنم.

76
00:06:43,000 --> 00:06:50,000
‫باید به آن بگویم تا تابعی با نام myShowDetails را فراخوانی کن
‫سپس event را تابع پاس خواهم داد.

77
00:06:50,000 --> 00:06:54,000
‫اکنون دایرکتیو انتظار دارد که متدی با نام myShowDetails درون scope وجود داشته باشد.

78
00:06:54,000 --> 00:07:00,000
‫بنابراین، درون scope آن متد را ایجاد خواهم کرد. و stub را برابر با آن
‫متد قرار میدهم.

79
00:07:00,000 --> 00:07:05,000
‫اکنون اجازه دهید فایل را ذخیره کرده و خروجی را ببینیم. بسیار خوب
‫تمام 10 تست ما پاس میشوند.

80
00:07:05,000 --> 00:07:10,000
‫خب این دو تستی که اکنون اضافه کردم درستی بایندینگ

81
00:07:10,000 --> 00:07:15,000
‫و کلیک را بررسی میکنند.

82
00:07:15,000 --> 00:07:20,000
‫درون کنترلر یک scope جدید با استفاده از $rootscope. $new ایجاد کردیم.

83
00:07:20,000 --> 00:07:29,000
‫در یک تست دایرکتیو نمی‌توانیم اینکار را انجام دهیم. اگر scope را برابر با
‫$rootscope. $new قرار دهیم، تست fail خواهد شد.

84
00:07:29,000 --> 00:07:32,000
‫تست کردن دایرکتیوهای انگولار در صورتی کار خواهد کرد که از
‫$rootScope به عنوان scopeتان استفاده کنید.

85
00:07:32,000 --> 00:07:36,000
‫بنابراین، همیشه مطمئن شوید که تنها از $rootScope در
‫تست‌های دایرکتیو استفاده میکنید.

86
00:07:36,000 --> 00:07:40,000
‫با اصلاح آن تست را مجدداً اجرا خواهم کرد.

87
00:07:40,000 --> 00:07:44,000
‫خب این نحوه تست کردن دایرکتیوها با استفاده از آزمون‌های واحد
‫انگولار است.

88
00:07:44,000 --> 00:07:47,000
‫بهتر است برای یکپارچه‌سازی مطالبی که آموخته‌اید

89
00:07:47,000 --> 00:07:52,000
‫برای دایرکتیوهایتان آزمون‌های واحدی بنویسید. ساده‌ترین راه برای اینکار
‫دریافت سورس

90
00:07:52,000 --> 00:07:56,000
‫این پروژه و افزودن آزمون‌های واحد برای دیگر دایرکتیوهای این پروژه است.

91
00:07:59,000 --> 00:08:06,000
‫نوشتن تست برای دایرکتیوها در انگولار خیلی راحت است.

92
00:08:06,000 --> 00:08:09,000
‫اجازه دهید مطالب گفته شده را با یک آزمون مرور کنیم.

93
00:08:09,000 --> 00:08:14,000
‫چرا تست کردن دایرکتیوها می‌تواند سخت باشد؟

94
00:08:14,000 --> 00:08:16,000
‫دو دلیل برای آن وجود دارد.

95
00:08:16,000 --> 00:08:22,000
‫اول اینکه، قسمت‌های زیادی درگیر هستند

96
00:08:22,000 --> 00:08:25,000
‫به‌خصوص اگر از تمپلیت‌های خارجی برای دایرکتیوهایتان استفاده میکنید.

97
00:08:25,000 --> 00:08:32,000
‫وظیفه html2js چیست؟

98
00:08:32,000 --> 00:08:36,000
‫این پیش‌پردازنده جاوا اسکریپتی که نودهای HTML را تولید می‌کند را برای شما
‫ایجاد خواهد کرد

99
00:08:36,000 --> 00:08:40,000
‫همانند HTML که شما از قبل تدارک دیده‌اید.

100
00:08:40,000 --> 00:08:46,000
‫خروجی تابع compile چه چیزی است؟

101
00:08:46,000 --> 00:08:50,000
‫این تابع یک تابع دیگر را به عنوان خروجی برمیگرداند. تابعی که شیء scope را

102
00:08:50,000 --> 00:08:55,000
‫زمانیکه یک دایرکتیو برای تست به آن پاس میدهید.


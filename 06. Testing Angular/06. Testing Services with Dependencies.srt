1
00:00:02,000 --> 00:00:07,000
‫اکنون که نحوهٔ تست کردن یک سرویس ساده را آموختیم،
‫اجازه دهید چگونگی تست یک سرویس پیچیده‌تر را بررسی کنیم.

2
00:00:07,000 --> 00:00:13,000
‫سرویس userData دارای یک وابستگی است، سرویسuserResource.

3
00:00:13,000 --> 00:00:19,000
‫این سرویس دارای سه تابع getUser، save و users است که هر کدام از آنها
‫از userResource استفاده می‌کنند.

4
00:00:19,000 --> 00:00:25,000
‫برای آموختن چگونگی تست یک سرویس شبیه این، تعدادی تست
‫برای getUser و save می‌نویسیم.

5
00:00:25,000 --> 00:00:31,000
‫تابع getUser یک کار را انجام میدهد. این تابع userResource را فراخوانی کرده
‫و مقدار آن را برمی‌گرداند.

6
00:00:31,000 --> 00:00:36,000
‫اجازه دهید دو تست بنویسیم، تست اول یکی از این حالت‌ها را تست میکند.

7
00:00:36,000 --> 00:00:40,000
‫اکنون، از آنجائیکه برای دو تابع مختلف تست‌هایی خواهم نوشت
‫مقداری آن را برای خودم

8
00:00:40,000 --> 00:00:45,000
‫ساده‌تر خواهم کرد و آنها را از یکدیگر جدا خواهم کرد.

9
00:00:45,000 --> 00:00:49,000
‫اکنون یک توصیف برای getUser دارم.

10
00:00:49,000 --> 00:00:55,000
‫به یاد داشته باشید که باید inject را برای دریافت یک وهله از
‫تابع userData، فراخوانی کنم.

11
00:00:55,000 --> 00:00:59,000
‫سپس یک کار مهم را باید در سرویس userData انجام دهم، یعنی
‫فراخوانی getUser

12
00:00:59,000 --> 00:01:04,000
‫اجازه دهید bob را به عنوان user name پاس دهم. اکنون، از آنجائیکه
‫userData در پشت‌صحنه userResource را فراخوانی میکند

13
00:01:04,000 --> 00:01:10,000
‫باید هر پارامتری userResource را تست کنم، به یک mockUserResource
‫نیاز دارم.

14
00:01:10,000 --> 00:01:14,000
‫یک expectation که از mockUserResource استفاده خواهد کرد را باید
‫تنظیم کنم.

15
00:01:14,000 --> 00:01:20,000
‫اولین پارامتر از اولین فراخوانی که یک شیء که حاوی یوزر bob است را تست خواهم کرد.

16
00:01:20,000 --> 00:01:24,000
‫در اینجا به جای toBe به toEqual برای اینکار نیاز دارم

17
00:01:28,000 --> 00:01:32,000
‫اکنون، مشکل بعدی که باید حل کنم این است که در اینحا شیء
‫mockUserResource را نداریم.

18
00:01:32,000 --> 00:01:37,000
‫بنابراین در یک beforeEach آنرا ایجاد خواهم کرد و از آنجائیکه
‫متغیر باید در دسترس باشد

19
00:01:37,000 --> 00:01:43,000
‫متغیر را به صورت سراسری تعریف میکنم.

20
00:01:43,000 --> 00:01:48,000
‫شیء userresource یک تابع مهم دارد.

21
00:01:48,000 --> 00:01:54,000
‫خب، شیء mockUserResource را ایجاد کردم، اما شیء userData
‫وقتی توسط انگولار ساخته شود

22
00:01:54,000 --> 00:01:59,000
‫از سرویس اصلی userResource استفاده خواهد کرد، سرویسی
‫که در برنامه ایجاد کرده‌ام نه این یکی.

23
00:01:59,000 --> 00:02:04,000
‫خب، باید به انگولار بگویم که وقتی سرویس userData نیاز به یک
‫سرویس userResource پیدا کرد،

24
00:02:04,000 --> 00:02:06,000
‫به جای سرویس اصلی از نمونه‌ایی که ایجاد کرده‌ام استفاده کند.

25
00:02:06,000 --> 00:02:10,000
‫اینکار را توسط دریافت شیء provider انجام خواهم داد.

26
00:02:10,000 --> 00:02:17,000
‫برای دریافت شیء provider باید متد module را با پاس دادن یک تابع
‫به آن فراخوانی کنم.

27
00:02:17,000 --> 00:02:21,000
‫این شیء یک تابع value دارد که دو پارامتر را می‌پذیرد،

28
00:02:21,000 --> 00:02:27,000
‫نام سرویس و مقدار آن، این مقدار زمانی که کسی سرویس را درخواست می‌کند
‫استفاده می‌شود.

29
00:02:27,000 --> 00:02:31,000
‫با فراخوانی این خط از کد در اینجا، به انگولار گفته‌ایم که وقتی
‫کسی درخواست شیء

30
00:02:31,000 --> 00:02:37,000
‫را userResource، از شیء mockUserResource به جای آن استفاده کن.

31
00:02:37,000 --> 00:02:41,000
‫اکنون تنظیمات را انجام دادم، قسمت آخری که باید انجام دهم
‫فراخوانی ماژول است.

32
00:02:41,000 --> 00:02:45,000
‫تمام قسمت‌ها در جای خود قرار دارند، اکنون می‌توانم
‫فایل را ذخیره و اجرا کنم.

33
00:02:45,000 --> 00:02:48,000
‫وقتی اجرا شد همانطور که مشاهده می‌کنید تست با موفقیت
‫انجام می‌شود.

34
00:02:48,000 --> 00:02:54,000
‫خب، اجازه دهید یک تست دیگر برای getUser بنویسیم. داخل متد getUser
‫همانطور که می‌بینید خروجی

35
00:02:54,000 --> 00:03:02,000
‫userResource. get برگشت داده می‌شود. اجازه دهید اینکار را با یک
‫تست بررسی کنیم.

36
00:03:02,000 --> 00:03:08,000
‫خب، getUser را فراخوانی کرده و خروجی را دریافت میکنم. 
‫انتظار دارم که خروجی مقادیری مشخص داشته باشد.

37
00:03:08,000 --> 00:03:13,000
‫بنابراین باید به mockUserResource بگویم تا رشته angular rocks را
‫برگرداند.

38
00:03:13,000 --> 00:03:19,000
‫بسیار خوب، اجازه دهید خروجی را بررسی کنیم
‫خب، تست با موفقیت انجام می‌شود.

39
00:03:19,000 --> 00:03:21,000
‫اکنون این دو تست را داریم، اجازه دهید یک تست دیگر بنویسیم.

40
00:03:21,000 --> 00:03:28,000
‫این یکی را برای تابع save می‌نویسیم. بنابراین بعد از describe
‫یک describe دیگر می‌نویسم.

41
00:03:28,000 --> 00:03:32,000
‫خب با نگاهی به تابع save خواهیم دید که userResource. save را

42
00:03:32,000 --> 00:03:42,000
‫با یک مقدار فراخوامی میکند. خب، اجازه دهید یک تست برای آن بنویسم.

43
00:03:42,000 --> 00:03:47,000
‫خب، userData. save را فراخوانی کردم همچنین یک expectation
‫را ایجاد کرده‌ام

44
00:03:47,000 --> 00:03:54,000
‫اجازه دهید تست را اجرا کنم.

45
00:03:54,000 --> 00:03:57,000
‫خب، تست با شکست مواجه شد اجازه دهید مشکل را بررسی کنیم.

46
00:03:57,000 --> 00:04:01,000
‫بسیار خب، خطا این است: 
‫متدی با نام save وجود ندارد.

47
00:04:01,000 --> 00:04:05,000
‫خب، این شیء سعی دارد متد save را فراخوانی کند

48
00:04:05,000 --> 00:04:11,000
‫اگر به تست‌م مراجعه کنم، خواهید دید که تنها یک متد get

49
00:04:11,000 --> 00:04:15,000
‫برای شیء mockUserResource داریم و متدی با نام save نداریم.

50
00:04:15,000 --> 00:04:20,000
‫بسیار خب، اکنون که تابع save را تعریف کرده‌ام، اجازه دهید این
‫تست را مجدداً اجرا کنم.

51
00:04:20,000 --> 00:04:24,000
‫بسیار خب، تست با موفقیت اجرا شد. خب این یک مثال عالی
‫از چگونگی تست یک سرویس است

52
00:04:24,000 --> 00:04:28,000
‫سرویسی که دارای یک وابستگی است و قادر به ارائه
‫یک mock dependency است.

53
00:04:28,000 --> 00:04:32,000
‫زمانیکه سرویس‌ها را تست می‌کنیم، همیشه نیاز به شبیه‌سازی
‫وابستگی‌ها برای دسترسی به تمام وابستگی‌ها داریم

54
00:04:36,000 --> 00:04:40,000
‫با این روش، هر وقت تستی برای هر سرویس با شکست مواجه شد
‫می‌دانیم که مشکل سرویس از کجا است


1
00:00:02,000 --> 00:00:06,000
‫در این قسمت می‌خواهیم از کارما به عنوان یک test runner استفاده کنیم.

2
00:00:06,000 --> 00:00:10,000
‫کارما یک ابزار خودکاری سازی فرآیند تست ساخته شده توسط تیم
‫انگولار در گوگل است.

3
00:00:10,000 --> 00:00:13,000
‫قبلاً نام این ابزار Testacular بود، اما در نهایت به Karma تغییر نام یافت.

4
00:00:13,000 --> 00:00:17,000
‫پس به خاطر داشته باشید که اطلاعاتی زیادی درباره Karma با نام

5
00:00:17,000 --> 00:00:21,000
‫Testacular در دسترس است.

6
00:00:21,000 --> 00:00:25,000
‫کارما کاملاً از انگولار مستقل است، یعنی می‌توانید انگولار را بدون کارما نیز تست کنید

7
00:00:25,000 --> 00:00:29,000
‫و برای تست کدهای جاوا اسکریپت نیز قابل استفاده است.

8
00:00:29,000 --> 00:00:32,000
‫کارما خیلی سریع است، به خصوص وقتیکه در مرورگر کروم از آن استفاده می‌کنید،

9
00:00:32,000 --> 00:00:36,000
‫اما یکی از نقاط ضعف کارما این است که دیباگ کردن و قرار دادن break point

10
00:00:36,000 --> 00:00:40,000
‫در مرورگر همیشه کار نخواهد کرد، در نتیجه بهترین حالت

11
00:00:40,000 --> 00:00:45,000
‫باز نگه‌داشتن کنسول در مرورگر و افزودن عبارت debugger در کد است.

12
00:00:45,000 --> 00:00:48,000
‫در این قسمت قصد نداریم جزئیات نصب Karma را بررسی کنیم.

13
00:00:48,000 --> 00:00:52,000
‫می‌توانید برای اطلاعات بیشتر به دوره من با نام testing client-side JavaScript
‫مراجعه کنید.

14
00:00:52,000 --> 00:00:56,000
‫اگر از قبل کارما را نصب نکرده‌اید و می‌خواهید با جزئیات نصب آن آشنا شوید

15
00:00:56,000 --> 00:01:00,000
‫لطفاً بخش مربوط به آن را در دوره‌ایی که اشاره کردم، مشاهید فرمائید

16
00:01:08,000 --> 00:01:12,000
‫یکی از موارد مهمی که می‌خواهیم بررسی کنیم فایل پیکربندی کارما است.

17
00:01:12,000 --> 00:01:16,000
‫این فایل پیکربندی تنظیمات کارما است که می‌خواهیم از آن استفاده کنیم.

18
00:01:16,000 --> 00:01:20,000
‫اجازه دهید از بالا شروع کنیم سپس درباره اکثر این تنظیمات صحبت خواهیم کرد.

19
00:01:20,000 --> 00:01:25,000
‫اولین موردی که می‌خواهم در مورد آن صحبت کنم basePath است. این آیتم
‫خیلی مهم است.

20
00:01:25,000 --> 00:01:30,000
‫می‌خواهید مطمئن شوید که با تنظیم basePath اجرای برنامه از این مسیر
‫شروع خواهد شد

21
00:01:36,000 --> 00:01:42,000
‫خوب می‌خواهم همین دایرکتوری مسیر اصلی باشد.

22
00:01:42,000 --> 00:01:46,000
‫دلیل اینکه ابتدا یک دایرکتوری قبل از app را انتخاب کردم این است که
‫مسیر تنظیمات این فایل

23
00:01:46,000 --> 00:01:50,000
‫داخل config میباشد، بنابراین برای رفتن به این مسیر،

24
00:01:50,000 --> 00:01:54,000
‫یک سطح بالا آمده‌ایم.

25
00:01:54,000 --> 00:01:59,000
‫تنظیم بعدی configuration است. این مورد تمام فایل‌هایی که کارما
‫استفاده خواهد کرد را لیست میکند.

26
00:01:59,000 --> 00:02:03,000
‫ابتدا دو ثابت که کارما در باره آنها اطلاع دارد را داریم، JASMINE و JASMINE ADAPTER

27
00:02:03,000 --> 00:02:06,000
‫این دو ثابت اجازه میدهند کارما درباره تست‌ها اطلاعاتی داشته باشد.

28
00:02:06,000 --> 00:02:10,000
‫سپس، تمام اسکریپت‌های موردنیاز را اضافه کرده‌ام.

29
00:02:10,000 --> 00:02:15,000
‫جی‌کوئری، انگولار و… همانطور که مشاهده میکنید انگولار را نیز اضافه کرده‌ام.

30
00:02:15,000 --> 00:02:20,000
‫این کار باعث میشود تا کارما هر فایلی که در دایرکتوری انگولار است را لود کند

31
00:02:20,000 --> 00:02:28,000
‫اجازه دهید نگاهی به داخل این دایرکتوری بیندازیم.

32
00:02:28,000 --> 00:02:33,000
‫خب در اینجا angular-cookies، angular-loader، angular-resource, angular-sanitize را داریم.

33
00:02:33,000 --> 00:02:39,000
‫ممکن است از تمام این فایلها در تست‌هایم استفاده نکنم

34
00:02:44,000 --> 00:02:50,000
‫مورد بعدی فایل angular-mocks است، که در داخل دایرکتوری lib قرار دارد.

35
00:02:50,000 --> 00:02:55,000
‫این فایل حاوی تمام ابزارهای mocking برای شبیه‌سازی مواردی مانند شیء XHR است.

36
00:02:55,000 --> 00:03:00,000
‫سپس sinon را داریم، Sinon یک کتابخانه mocking است که می‌خواهیم
‫در زمان استفاده از mock از آن استفاده کنیم

37
00:03:00,000 --> 00:03:05,000
‫برای اطلاعات بیشتر در این خصوص، یک فصل کامل را در دوره testing client-side JavaScript

38
00:03:05,000 --> 00:03:10,000
‫به آن اختصاص داده‌ام. بنابراین اگر پیشنهاد میکنم به آن نگاهی بیندازید

39
00:03:15,000 --> 00:03:20,000
‫قدم بعدی افزودن تمام فایل‌های js به این پروژه است.

40
00:03:23,000 --> 00:03:28,000
‫خب این آخرین مورد نیز باعث میشود Karma تمام آزمونهای واحدی که
‫میخواهیم ایجاد کنیم را بارگذاری کند.

41
00:03:28,000 --> 00:03:32,000
‫مورد بعدی autoWatch است. این تنظیم باعث میشود تا Karma

42
00:03:32,000 --> 00:03:39,000
‫تمام فایلها را برای تغییر مشاهده کند و هر وقت فایل تغییر پیدا کرد
‫Karma بارگذاری مجدد شده و تستها را بر میگرداند.

43
00:03:39,000 --> 00:03:43,000
‫آخرین مورد نیز browser است. این تنظیم به Karma خواهد گفت که
‫تست‌های من درون چه مرورگرهایی

44
00:03:43,000 --> 00:03:46,000
‫اجرا شوند، اکنون تنها مرورگر کروم را لیست می‌کنیم.

45
00:03:46,000 --> 00:03:51,000
‫یعنی تست‌های من تنها درون مرورگر کروم قابل اجرا هستند بنابراین خیلی سریع تستها
‫اجرا خواهند شد زیرا

46
00:03:51,000 --> 00:03:55,000
‫Karma و مروگر کروم با یکدیگر خیلی سریع اجرا خواهند شد.

47
00:03:55,000 --> 00:03:59,000
‫مرورگرهای دیگری نیز هستند که در اینجا می‌توانیم لیست کنیم، باز هم ذکر میکنم
‫برای اطلاعات بیشتر در این خصوص،

48
00:03:59,000 --> 00:04:02,000
‫دوره‌ایی که به آن اشاره کردم را مشاهده کنید.

49
00:04:02,000 --> 00:04:07,000
‫اکنون Karma با موفقیت پیکربندی شده است، اجازه دهید به اجرای آن

50
00:04:07,000 --> 00:04:14,000
‫درون خط فرمان نگاهی بیندازیم. از طریق خط فرمان، scripts/test. sh را تایپ میکنم.

51
00:04:14,000 --> 00:04:18,000
‫اگر از خط فرمان ویندوز استفاده میکنید باید از test. bat استفاده کنید.

52
00:04:18,000 --> 00:04:23,000
‫این دستور قسمتی از Angular Seed است و تمام تست‌ها را اجرا خواهد کرد.

53
00:04:23,000 --> 00:04:28,000
‫همانطور که مشاهده می‌کنید تمام تست‌ها اجرا شده است

54
00:04:28,000 --> 00:04:31,000
‫اجازه دهید یک فایل را تغییر دهم در نتیجه تست برگدانده خواهد شد.

55
00:04:31,000 --> 00:04:36,000
‫در اینجا، هیچ تستی از قبل نداریم.

56
00:04:36,000 --> 00:04:41,000
‫خب این نحوه پیکربندی Karma برای اجرای آزمونهای واحد است.


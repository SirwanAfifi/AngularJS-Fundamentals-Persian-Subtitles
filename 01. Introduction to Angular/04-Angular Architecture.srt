1
00:00:01,500 --> 00:00:06,500
‫بگذارید به بعضی از گزینه‌های معماری
‫که انگولار ایجاد کرده است نگاهی بیندازیم.

2
00:00:06,500 --> 00:00:10,500
‫ابتدا، انگولار از انقیاد داده دو طرفه پشتیبانی میکند،
‫به این معنی که کاربر با وارد کردن مقدار درون فیلدها

3
00:00:10,500 --> 00:00:13,500
‫مدل بلافاصله بروزرسانی می‌شود.

4
00:00:13,500 --> 00:00:17,500
‫یعنی در بیشتر حالات شما نیاز نیست با رخداد خاصی کار
‫کنید و برای پاسخ…

5
00:00:17,500 --> 00:00:23,500
‫به صورت دستی عناصر HTML را تغییر دهید، به جای آن
‫انگولار اینکار را برای شما انجام میدهد.

6
00:00:23,500 --> 00:00:26,500
‫همچنین انگولار از یک تکنیک با نام Dirty Checking
‫استفاده میکند.

7
00:00:26,500 --> 00:00:30,500
‫در نتیجه شما نیازی نیست داده هایتان را داخل یک
‫ساختار ویژه ایی قرار دهید…

8
00:00:30,500 --> 00:00:34,500
‫و از متدهای get و set برای خواندن و نوشتن داده‌ها ‫استفاده کنید.

9
00:00:34,500 --> 00:00:38,500
‫به سادگی می‌توانید مدلتان را داخل یک کلاس جاوا اسکریپتی
‫ساده (POJO) تعریف کنید…

10
00:00:38,500 --> 00:00:43,500
‫و هر وقت داده هایتان تغییر کند، انگولار به صورت اتوماتیک
‫View مربوطه را بروزرسانی میکند.

11
00:00:43,500 --> 00:00:46,500
‫مورد بعدی، ویژگی Dependency Injection می‌باشد.

12
00:00:46,500 --> 00:00:52,500
‫این ویژگی قسمت هایی از برنامه شما را کپسوله می‌کند،
‫همچنین قابلیت تست پذیری را افزایش می‌دهد.

13
00:00:52,500 --> 00:00:54,500
‫برای مطالعه بیشتر در رابطه با DI میتوانید به اینجا مراجعه کنید.

14
00:00:54,500 --> 00:00:58,500
‫به علاوه، Pluralsight یک دوره کامل در رابطه با
‫این موضوع تحت عنوان Inversion of Control دارد.

15
00:00:58,500 --> 00:01:04,500
‫می توانید جهت مطالعه بیشتر به آن مراجعه نمائید.

16
00:01:04,500 --> 00:01:09,500
‫خب، بگذارید نگاهی بر کامپوننت‌های اصلی انگولار
‫و روابط شان با یکدیگر بیندازیم.

17
00:01:09,500 --> 00:01:12,500
‫در انگولار، همه چیز با کنترلر آغاز می‌شود.

18
00:01:12,500 --> 00:01:19,500
‫در یک برنامه انگولار، کنترلر نقش مرکزی را ایفا میکند. 
‫کنترلرها حاوی حالت و منطق برنامه می‌باشند.

19
00:01:19,500 --> 00:01:22,500
‫مورد بعدیView می‌باشند، Viewها از کنار هم قرار گرفتن
‫انقیاد داده‌ها و Directive‌ها تشکیل شده اند.

20
00:01:22,500 --> 00:01:25,500
‫این نحوه تعامل انگولار با کاربر است.

21
00:01:25,500 --> 00:01:30,500
‫کنترلرها هم به صورت انتقاد داده یک طرفه و هم دو طرفه
‫می توانند با Viewها ارتباط برقرار کنند.

22
00:01:30,500 --> 00:01:34,500
‫directiveها که به شدت در مورد آنها بحث می‌شود،
‫در واقع تنها قسمتی از viewها می‌باشند.

23
00:01:34,500 --> 00:01:36,500
‫و آخرین بخش مهم سرویس‌ها می‌باشند.

24
00:01:36,500 --> 00:01:41,500
‫سرویس‌ها محلی جهت نگهداری منطق تجاری و حالت
‫برنامه را در اختیارتان قرار می‌دهند.

25
00:01:41,500 --> 00:01:46,500
‫اگر در مورد اینکه وظیفه اساسی برنامه تان چه
‫چیزی هست فکر میکنید، بیشتر آنها در سرویس‌ها ‫انجام می‌شوند.

26
00:01:46,500 --> 00:01:52,500
‫منطق تجاری پیچیده، حالات مهم برنامه، و…
‫سرویس‌ها محل تعریف این موارد هستند.

27
00:01:52,500 --> 00:01:55,500
‫همچنین، سرویس‌ها محلی برای برقراری ارتباط
‫با سرور می‌باشند.

28
00:01:55,500 --> 00:01:58,500
‫خوب! اجازه دهید مروری بر موارد گفته شده داشته باشیم.

29
00:01:58,500 --> 00:02:04,500
‫کامپوننت مرکزی یک برنامه انگولار چه چیزی است؟

30
00:02:04,500 --> 00:02:08,500
‫کامپوننت مرکزی یک برنامه انگولار کنترلرها هستند.

31
00:02:08,500 --> 00:02:12,500
‫directiveها چه قسمتی کامپیوننت‌ها هستند؟

32
00:02:12,500 --> 00:02:15,500
‫directiveها قسمتی از viewها می‌باشند.

33
00:02:15,500 --> 00:02:19,500
‫در کدام کامپوننت باید منطق تجاری برنامه را قرار دهید؟

34
00:02:19,500 --> 00:02:24,500
‫شما باید منطق تجاری برنامه را داخل سروییس‌ها قرار دهید.


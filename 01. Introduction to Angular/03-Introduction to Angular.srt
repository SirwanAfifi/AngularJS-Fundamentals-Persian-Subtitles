1
00:00:01,500 --> 00:00:05,000
‫خوب، انگولار چیست و چرا باید از آن استفاده کنیم؟

2
00:00:05,000 --> 00:00:11,000
‫ساده‌ترین پاسخ برای این سوال این است: 
‫آنگولار یک کتابخانه جاوا اسکیرپتی است، اما در واقع
‫خیلی بیشتر از آن

3
00:00:11,000 --> 00:00:15,000
‫احتمالاً دقیقتر است که آن را در دسته فریم ورک‌های MV*
‫قرار دهیم.

4
00:00:15,000 --> 00:00:18,000
‫اگرچه صحبت در مورد آن چیزی را برای
‫ما مشخص نمی‌کند،‫حداقل در برخی شرایط

5
00:00:18,000 --> 00:00:25,000
‫می‌توانیم ‫آن را با سایر کتابخانه‌های ‫محبوب MV* دیگر مانند
‫Knockout یا Backbone مقایسه کنیم

6
00:00:25,000 --> 00:00:28,000
‫اگرچه ما در واقع نمی‌خواهیم هیچ مقایسهٔ مستقیمی
‫را با سایر فریم ورک‌های MV* بکنیم

7
00:00:28,000 --> 00:00:34,000
‫در رابطه با اجزا مشترکی که با سایر فریم ورک‌ها و اینکه
‫مواردی که آن را از این گروه فریم ورک‌ها
‫جدا می‌سازد صحبت خواهیم کرد.

8
00:00:34,000 --> 00:00:39,000
‫انگولار تنها یک فریم ورک MV* نیست،
‫یک فریم ورک opinionated می‌باشد.

9
00:00:39,000 --> 00:00:45,000
‫نرم افزار opinionated چیست؟
‫یک نرم افزار opinionated شما را به سوی
‫انجام روش‌های خاص هر چیزی راهنمایی می‌کند.

10
00:00:45,000 --> 00:00:50,000
‫نرم افزار opinionated یک دیدگاه دارد. 
‫ممکن است خودش را محدود به حل مشکلات کمتری بکند،

11
00:00:50,000 --> 00:00:55,000
‫اما به طور کلی نرم افزار دارای دیدگاه آن مشکلات را با درگیری کمتری حل میکند.

12
00:00:55,000 --> 00:00:58,000
‫ابن به معنی نیست که برای حل یک مسئله
‫توسط انگولار بیشتر از یک راه حل وجود ندارد.

13
00:00:58,000 --> 00:01:01,000
‫برای مثال دستکاری DOM.

14
00:01:01,000 --> 00:01:05,000
‫انگولار از شما می‌خواهد تنها داخل directiveها
‫DOM را دستکاری کنید، اما توسط انگولار

15
00:01:05,000 --> 00:01:10,000
‫داخل directiveها می‌توانید
‫از jQuery، Zepto و دیگر کتابخانه‌ها استفاده کنید،
‫و یا حتی می‌توانید

16
00:01:10,000 --> 00:01:13,000
‫از جاوااسکریپت خام برای دستکاری DOM نیز استفاده کنید.

17
00:01:13,000 --> 00:01:15,000
‫به این معنی نیست که شما نمی‌توانید عملیات
‫دستکاری DOM را از داخل دیگر بخش های

18
00:01:15,000 --> 00:01:21,000
‫یک اپلیکیشن انگولار انجام دهید، اما
‫Angular قطعاً یک دیدگاه در مورد آن دارد.

19
00:01:21,000 --> 00:01:24,000
‫و به آرامی شما را به سوی کدنویسی به یک روش
‫خاص راهنمایی می‌کند.

20
00:01:24,000 --> 00:01:28,000
‫بنابراین چرا باید از نرم افزار opinionated استفاده کنید؟
‫دلایلی بسیاری وجود دارد.

21
00:01:28,000 --> 00:01:33,000
‫در نگاه اول، ممکن است عدم آزادی چیز بدی بظر برسد،
‫اما در واقع اینطور نیست.

22
00:01:33,000 --> 00:01:37,000
‫تیم 37signals، شرکتی که Ruby on Rails
‫را ابداع کردند، یک مقاله

23
00:01:37,000 --> 00:01:42,000
‫عالی در رابطه با مزایای نرم افزار opinionated نوشته اند،
‫اینجا می‌تونید پیداش کنید

24
00:01:42,000 --> 00:01:48,000
‫در اصل، به گفتهٔ آن‌ها بهترین نرم‌افزار، نر‌افزاریست
‫که دارای یک چشم‌انداز باشد. 
‫نرم‌افزاری که یک موضع را اتخاذ نماید.

25
00:01:48,000 --> 00:01:52,000
‫کاملاً درست است. با استفاده از یک نرم افزار opinionated
‫به این نتیجه خواهید رسید که انجام کارهای که در

26
00:01:52,000 --> 00:01:54,000
‫چشم انداز نرم افزار قرار میگیرند را سریعتر خواهد کرد.

27
00:01:54,000 --> 00:01:59,000
‫وقتی صحبت از انگولار می‌شود
‫آن چشم انداز بسیار گسترده خواهد بود. برای ساختن

28
00:01:59,000 --> 00:02:02,000
‫هر چیزی از برنامه‌های تجاری گرفته تا پخش کننده‌های ‫ویدئویی بسیار مناسب است.

29
00:02:02,000 --> 00:02:08,000
‫در واقع اگر شما در حال تماشای این ویدئو هستید،
‫پس از یک برنامه انگولار استفاده میکنید.

30
00:02:08,000 --> 00:02:13,000
‫اما ابتدا اجازه بدهید تا مطمئن شویم
‫که یک فریم ورک MV* دقیقا چیست؟

31
00:02:13,000 --> 00:02:18,000
‫حرف M آن مخفف Model است. 
‫مدل جایی است که داده‌ها را در آن ذخیره
‫می کنید و حالت برنامه می‌باشد.

32
00:02:18,000 --> 00:02:23,000
‫V آن نیز مخخف View است. 
‫View در واقع کارش نمایش مدل به کاربر است

33
00:02:23,000 --> 00:02:29,000
‫اطلاعاتی که شما می‌خواهید آنها را نشان دهید
‫و View جایی است که شما ورودی را از کاربر دریافت می‌کنید

34
00:02:29,000 --> 00:02:33,000
‫* نیز می‌تواند مخفف هر چیز دیگری باشد.

35
00:02:33,000 --> 00:02:39,000
‫در بیشتر فریم ورک‌های رایج MV* ، * یک کنترلر
‫یا یک Presenter و یا یک ViewModel است.

36
00:02:39,000 --> 00:02:42,000
‫و یا حتی چیزی متفاوت علاوه بر آن سه.

37
00:02:42,000 --> 00:02:48,000
‫در واقع بیشتر فریم ورک‌ها حتی این اجازه را به شما
‫می دهند تا یکی از آن سه را انتخاب کنید،
‫و شما را ملزم به استفاده از یکی از آنها نمی‌کنند

38
00:02:48,000 --> 00:02:51,000
‫حالا شما ممکن است بپرسید انگولار کدامیک
‫از آن سه را استفاده میکند؟

39
00:02:51,000 --> 00:02:56,000
‫خوب، انگولار از کنترلر آن استفاده میکند. 
‫بنابراین برخی انگولار را یک فریم ورک MVC نام می‌برند.

40
00:02:56,000 --> 00:02:59,000
‫آن قطعاً درست خواهد بود، اما در دنیای وب فریم ورک‌های
‫خیلی زیادی وجود دارند…

41
00:02:59,000 --> 00:03:04,000
‫که در این دسته بندی قرار می‌گیرند،
‫اما لزوماً تنها MVC داخل این دسته بندی…

42
00:03:04,000 --> 00:03:09,000
‫که این واژه MV* به
‫طور معمول استفاده کرده است قرار نمی‌گیرد.

43
00:03:09,000 --> 00:03:12,000
‫انگولار یک کتابخانه سورس باز می‌باشد که
‫توسط تیمی در Google نوشته شده است

44
00:03:12,000 --> 00:03:16,000
‫که بهترین انتخاب‌ها را در اختیار ما می‌گذارد. 
‫انگولار توسط تیمی متخصصینی بسیار ماهر

45
00:03:16,000 --> 00:03:20,000
‫که ‫برای ساختن آن دورهم جمع شده اند،
‫پشتیبانی می‌شود.

46
00:03:20,000 --> 00:03:22,000
‫به این معنی که شما نیاز نیست نگران متوقف شدن
‫توسعه آن باشید،

47
00:03:22,000 --> 00:03:26,000
‫چونکه بدلیل متن باز بودن آن…

48
00:03:26,000 --> 00:03:30,000
‫می تواند از مشارکت کل جامعه Javascript
‫بهره مند شود.

49
00:03:30,000 --> 00:03:37,000
‫در واقع، در زمان تهیه این آموزش، انگولار بیش از
‫100 مشارکت کننده برای مخزن کد Githubش دارد.

50
00:03:37,000 --> 00:03:43,000
‫همچنین انگولار خیلی جامع می‌باشد. 
‫چه چیزی آن را جامع ساخته است؟
‫بیایید نگاهی به نمودار بیندازیم.

51
00:03:43,000 --> 00:03:46,000
‫انگولار از ارتباطات AJAX هم برای ارتباط با سرور
‫استفاده می‌کند در نتیجه شما می‌توانید…

52
00:03:46,000 --> 00:03:48,000
‫با سرور تبادل اطلاعات کنید.

53
00:03:48,000 --> 00:03:52,000
‫این داده‌ها به صورت اشیاء ساده جاوا اسکریپتی
‫ذخیره می‌شوند، بنابراین نیاز نیست هیچ فراخوانی…

54
00:03:52,000 --> 00:03:56,000
‫مخصوصی جهت بروز رسانی داده‌ها انجام دهید.

55
00:03:56,000 --> 00:03:59,000
‫انگولار از نمایش داده‌ها درون صفحات پشتیبانی میکند
‫که شما می‌توانید توسط partial template‌ها این
‫کار را انجام دهید.

56
00:03:59,000 --> 00:04:03,000
‫یا تنها می‌توانید ساختار DOM موجود در صفحه را تغییر دهید

57
00:04:03,000 --> 00:04:07,000
‫انگولار همچنین از بروزرسانی داده‌ها یا مدل
‫براساس تعاملات کاربر نیز پشتیبانی
‫می کند، بنابراین زمانیکه کاربر…

58
00:04:07,000 --> 00:04:12,000
‫درون یک فیلد متنی مقداری را وارد میکند، این مقدار
‫جدید نیز به صورت خودکار درون مدل تان کپی می‌شود.

59
00:04:12,000 --> 00:04:15,000
‫نیاز نیست منتظر رویدادهای خاصی باشید،
‫کافی است به انگولار بگوئید که یک…

60
00:04:15,000 --> 00:04:22,000
‫تکست باکس یک قسمت مشخص از دیتا را داشته باشد،
‫و انگولار آن را برای شما Sync نگه می‌دارد.

61
00:04:22,000 --> 00:04:26,000
‫همچنین انگولار از مسیریابی و یا حرکت از یک
‫View به View دیگر را نیز پشتیبانی می‌کند.

62
00:04:26,000 --> 00:04:30,000
‫این بخش کلیدی ساخت برنامه‌های ‫تک صفحه ای یا SPA می‌باشد.

63
00:04:30,000 --> 00:04:34,000
‫به این ترتیب می‌توانید کاملاً View هایتان
‫را براساس تعاملات کاربر تغییر دهید.

64
00:04:34,000 --> 00:04:40,000
‫انگولار همچنین URL را در مرورگر بروزرسانی خواهد کرد،
‫به طوری که View جدید قابلیت bookmark شدن را دارا باشد.

65
00:04:40,000 --> 00:04:43,000
‫یکی دیگر از جنبه‌های مهم انگولار قابلیت
‫آزمون پذیریش می‌باشد.

66
00:04:43,000 --> 00:04:46,000
‫انگولار از ابتدا برای آزمون پذیری ساخته شده بود.

67
00:04:46,000 --> 00:04:52,000
‫زمانیکه تیم انگولار اولین نسخه آن را منتشر کرد،
‫اولویت اصلی قابلیت آزمون پذیری آن بود.

68
00:04:52,000 --> 00:04:55,000
‫به معنی که انگولار تنها از آزمون‌های ‫واحد مجزا پشتیبانی نمی‌کند،

69
00:04:55,000 --> 00:04:58,000
‫بلکه از تست‌های یکپارچه، end-to-end (تست برنامه
‫در یک سناریوی واقعی) نیز پشتیبانی میکند.

70
00:04:58,000 --> 00:05:01,000
‫همچنین، تعدادی اشیاء توکاری که Angular
‫ارائه می‌دهد دارای یکسری نسخه‌های ویژه هستند که…

71
00:05:01,000 --> 00:05:04,000
‫فرآیند تست را برای شما آسان خواهند کرد
‫را می‌توانید استفاده کنید.

72
00:05:04,000 --> 00:05:09,000
‫در واقع، تست در زمان نوشتن فریم ورک خیلی
‫حیاتی است، تیم Angular…

73
00:05:09,000 --> 00:05:15,000
‫یک ابزار تست عالی را که قبلاً Testacular نام داشت
‫و هم اکنون Karma نام دارد را تدارک دیده است.

74
00:05:15,000 --> 00:05:21,000
‫این ابزار توسط شرکت‌های زیادی برای نوشتن
‫تست مورد استفادهقرار گرفته است، در حالیکه
‫حتی از Angular هم استفاده نکرده اند.

75
00:05:21,000 --> 00:05:24,000
‫شاید یکی از ویژگی‌های Angular که آن را…

76
00:05:24,000 --> 00:05:29,000
‫از بقیه فریم ورک‌های MV* جدا می‌سازد، بسط دادن
‫HTML با فراهم آوردن عناصر و خصوصیات خودش…

77
00:05:29,000 --> 00:05:34,000
‫با نام directive‌ها باشد. که برای تعامل با DOM
‫مورد استفاده قرار می‌گیرند.

78
00:05:34,000 --> 00:05:38,000
‫در واقع Angular این اجازه را به شما می‌دهد تا
‫به ساختار HTML کاملاً سفارشی کنید.

79
00:05:38,000 --> 00:05:42,000
‫تصور کنید که اگر HTML به جای صفحات متنی
‫برای برنامه‌های کاربری طراحی می‌شد.

80
00:05:42,000 --> 00:05:46,000
‫این قابلیتی است که Angular در اختیار شما قرار میدهد.

81
00:05:46,000 --> 00:05:51,000
‫بگذارید مثالی را با هم بررسی کنیم.

82
00:05:51,000 --> 00:05:54,000
‫در اینجا ما یک تگ input داریم، به خصوصیت آخر توجه کنید.

83
00:05:54,000 --> 00:05:59,000
‫این یک ویژگی سفارشی است که من به Angular
‫بگویم که این عنصر

84
00:05:59,000 --> 00:06:01,000
‫در هنگام بارگذاری صفحه دارای فوکوس باشد.

85
00:06:01,000 --> 00:06:07,000
‫ممکن است بگوئید که HTML5 خودش یک ویژگی با نام
‫autofocus دارد که همین کار را برای ما انجام می‌دهد.

86
00:06:07,000 --> 00:06:13,000
‫بنابراین HTML5 این ویژگی را در نظر می‌گیرد،
‫اما مشکل اینجاست که این ویژگی تنها در مروگرهای
‫جدید پشتیبانی می‌شود.

87
00:06:13,000 --> 00:06:19,000
‫یک directive سفارشی مانند این مورد توسط خیلی از
‫مرورگرها به واسطه جادوی Angular پشتیبانی می‌شود.

88
00:06:19,000 --> 00:06:22,000
‫اینجا یک مثال دیگر داریم. این بار خیلی بلندپرواز شده ام!

89
00:06:22,000 --> 00:06:25,000
‫این ممکن است یک دکمه دو حالته باشد، شاید حتی
‫یک دکمه با تغییر وضعیت…

90
00:06:25,000 --> 00:06:29,000
‫برای چندین حالت باشد، اما می‌توانم چندین نوع
‫از این دکمه چند حالته را ایجاد کنم…

91
00:06:29,000 --> 00:06:31,000
‫تا به روشی که می‌خواهم در نرم افزارم کار کند.

92
00:06:31,000 --> 00:06:36,000
‫ساختار HTML آن به این صورت است، اما بعد از اینکه
‫Angular کارش پردازش عنصر را انجام بدهد…

93
00:06:36,000 --> 00:06:41,000
‫مرورگر ساختار HTMLی که مورد نظر
‫من است را خواهد دید.

94
00:06:41,000 --> 00:06:46,000
‫و در نهایت، چیزی که بیش‌تر خیال پردازی به نظر می‌رسد،
‫ممکن است یک ویجت سفارشی شده

95
00:06:46,000 --> 00:06:50,000
‫برای نرم افزاری خاص باشد که به شیوه ایی خاص
‫جهت نمایش کاربران استفاده می‌شود.

96
00:06:50,000 --> 00:06:53,000
‫تنها باید شیء user را توسط خصوصیت user برای
‫تگ سفارشی که ایجاد کردم را پاس بدهم.

97
00:06:53,000 --> 00:07:00,000
‫در نهایت Angular این عنصر را به ساختار HTMLی که
‫مرورگر می‌تواند رندر کند تبدیل خواهد کرد.

98
00:07:00,000 --> 00:07:05,000
‫فکر کنید که چطور بسیاری از منطق تجاری Viewیی
‫به آن تعلق دارد را در Viewتان نگه میدارد.

99
00:07:05,000 --> 00:07:10,000
‫آخرین ویژگی مهمی در موردش بحث خواهیم کرد ویژگی
‫forward thinking است.

100
00:07:10,000 --> 00:07:13,000
‫Angular در واقع از فناوری‌های وبی که در آینده خواهیم
‫دید پشتیبانی میکند،

101
00:07:13,000 --> 00:07:17,000
‫و برنامه ما برای استفاده از فناوری هایی که در سال‌های ‫آتی…

102
00:07:17,000 --> 00:07:21,000
‫گسترده‌تر خواهد شد ساخته شده است.

103
00:07:21,000 --> 00:07:25,000
‫اجازه دهید نگاهی به تعدادی از این فناوری‌ها بیندازیم.

104
00:07:25,000 --> 00:07:30,000
‫به خاطر دارید وقتی در مورد اینکه اگر HTML به جای documentها
‫برای applicationها طراحی میشد، صحبت کردیم؟

105
00:07:30,000 --> 00:07:34,000
‫خب، این آن چیزی هست که web component‌ها هستند. 
‫web component‌ها این امکان را به شما میدهد تا به درستی

106
00:07:34,000 --> 00:07:40,000
‫کامپوننت‌ها و ویجت‌های کپسوله شده ایی برای صفحه تان ایجاد کنید. 
‫و کدهایی HTML ، CSS ، Javascript کپسوله شده ایی داشته باشید.

107
00:07:40,000 --> 00:07:44,000
‫این مقاله را می‌توانید در رابطه با web componentها مطالعه کنید.

108
00:07:44,000 --> 00:07:48,000
‫یکی دیگر از ویژگی‌های رو به رشد که در آینده بیشتر
‫مرورگرها از آن پشتیبانی خواهد کرد Object. observe است.

109
00:07:48,000 --> 00:07:52,000
‫این فناوری به شما این امکان را می‌دهد تا یک شیء
‫و یا خصوصیت یک شیء جاوا اسکریپتی را برای مشاهده
‫تغییرات و واکنش نشان دادن با آن تغییرات زیرنظر داشته باشید.

110
00:07:52,000 --> 00:07:57,000
‫بیشتر فریم ورک‌های MV* شما را وادار میکنند تا داده هایتان
‫را داخل ساختارهای ویژه ایی قرار دهید و هر موقع که خواستید

111
00:07:57,000 --> 00:08:01,000
‫برای خواندن و نوستن آنها را توسط متدهایی فراخوانی کنید.

112
00:08:01,000 --> 00:08:05,000
‫چونکه انگولار این کار را انجام نمی‌دهد، زمانیکه
‫Object. observe ‫به صورت گسترده‌تر در دسترس باشد
‫Angular از آن پشتیبانی خواهد کرد

113
00:08:08,000 --> 00:08:12,000
‫و از مزایای بهبود عملکرد و سرعت آن بهره مند می‌شود.

114
00:08:12,000 --> 00:08:18,000
‫برای اطلاعات بیشتر درباره Object. observe می‌توانید
‫به این آدرس مراجعه کنید.

115
00:08:18,000 --> 00:08:21,000
‫اکنون، آخرین چیزی که می‌خواهم نگاهی به آن داشته باشیم
‫وب سایت رسمی انگولار است.

116
00:08:21,000 --> 00:08:26,000
‫همانطور که می‌بینید، اطلاعاتی زیادی در این سایت قرار دارد.

117
00:08:26,000 --> 00:08:29,000
‫در صفحه اصلی متن‌های مقدماتی در مورد آن موجود است.

118
00:08:29,000 --> 00:08:33,000
‫در این بخش آموزشی آن شامل لینک به ویدئوهای آموزشی،
‫case studyها و…

119
00:08:33,000 --> 00:08:38,000
‫لینک به Seed project template، بعداً در مورد آن بحث خواهیم
‫کرد، می‌باشد.

120
00:08:38,000 --> 00:08:41,000
‫اما، نکته کلیدی استفاده از این سایت، لینک های

121
00:08:41,000 --> 00:08:45,000
‫داخل قسمت Develope می‌باشد، که شامل…

122
00:08:45,000 --> 00:08:52,000
‫Developer Guide و API Reference می‌باشد. 
‫ابتدا بگذارید نگاهی به Developer Guide بیندازیم.

123
00:08:52,000 --> 00:08:55,000
‫این صفحه شامل تمام مفاهیم انگولار می‌باشد.

124
00:08:55,000 --> 00:08:58,000
‫بنابراین، اگر سوال به خصوصی در مورد انگولار دارید…

125
00:08:58,000 --> 00:09:03,000
‫می توانید مفهوم موردنظر را اینجا بیابید، مثلاً اگر سوالی
‫در مورد Moduleها دارید…

126
00:09:03,000 --> 00:09:08,000
‫بر روی Modules کلیک کرده و مستندات رسمی انگولار
‫را در مورد Moduleها را مطالعه نمائید.

127
00:09:08,000 --> 00:09:10,000
‫خوب، بگذارید نگاهی به API Reference بیندازیم.

128
00:09:10,000 --> 00:09:14,000
‫این صفحه حاوی اطلاعات بسیارخاصی از اجزای
‫انگولار می‌باشد.

129
00:09:14,000 --> 00:09:17,000
‫به طور مثال لیست تمام directiveهایی که انگولار ارائه میدهد
‫اینجا مشخص است.

130
00:09:17,000 --> 00:09:21,000
‫اگر کمی پائین‌تر اسکرول کنیم لیست تمام فیلترهای و

131
00:09:21,000 --> 00:09:26,000
‫سرویس‌های ارائه شده توسط انگولار و موارد دیگری
‫را می‌توانیم مشاهده کنیم.

132
00:09:26,000 --> 00:09:31,000
‫بنابراین، آنها بخش هایی از وب سایت انگولار هستند
‫که شما باید به صورت مکرر بازدید کنید.

133
00:09:31,000 --> 00:09:33,000
‫بگذارید با یک آزمون موارد گفته شده را مرور کنیم.

134
00:09:33,000 --> 00:09:38,000
‫حال از دیدگاه آنگولار این سوال پیش میاد که اگرHTML
‫برای طراحی صفحات وب ایجاد شده است، پس وظیفه‌اش چیست؟

135
00:09:38,000 --> 00:09:43,000
‫از دیدگاه انگولار HTML برای ساخت اپلیکیشن‌ها ‫مورد استفاده قرار می‌گیرد.

136
00:09:43,000 --> 00:09:48,000
‫انگولار از چه نوع آزمونهایی پشتیبانی میکند؟

137
00:09:48,000 --> 00:09:52,000
‫انگولار از آزمون‌های واحد و آزمون‌های End to End
‫پشتیبانی میکند.

138
00:09:52,000 --> 00:09:57,000
‫یکی از دلایلی که می‌گویند انگولار دارای
‫ویژگی forward-thinking است را نام ببرید.

139
00:09:57,000 --> 00:10:02,000
‫انگولار به دلیل پشتیبانی اش از Web Component‌ها ‫و Object. observeدارای ویژگی forward-thinking است.

